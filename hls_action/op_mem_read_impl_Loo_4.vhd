-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity op_mem_read_impl_Loo_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    read_mem_config_offs_6 : IN STD_LOGIC_VECTOR (63 downto 0);
    read_words_cast_loc_s : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_din_gmem_V_AWVALID : OUT STD_LOGIC;
    m_axi_din_gmem_V_AWREADY : IN STD_LOGIC;
    m_axi_din_gmem_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_din_gmem_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_din_gmem_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_din_gmem_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_din_gmem_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_din_gmem_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_din_gmem_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_din_gmem_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_din_gmem_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_din_gmem_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_WVALID : OUT STD_LOGIC;
    m_axi_din_gmem_V_WREADY : IN STD_LOGIC;
    m_axi_din_gmem_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_din_gmem_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_din_gmem_V_WLAST : OUT STD_LOGIC;
    m_axi_din_gmem_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_ARVALID : OUT STD_LOGIC;
    m_axi_din_gmem_V_ARREADY : IN STD_LOGIC;
    m_axi_din_gmem_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_din_gmem_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_din_gmem_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_din_gmem_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_din_gmem_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_din_gmem_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_din_gmem_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_din_gmem_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_din_gmem_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_din_gmem_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_RVALID : IN STD_LOGIC;
    m_axi_din_gmem_V_RREADY : OUT STD_LOGIC;
    m_axi_din_gmem_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_din_gmem_V_RLAST : IN STD_LOGIC;
    m_axi_din_gmem_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_din_gmem_V_BVALID : IN STD_LOGIC;
    m_axi_din_gmem_V_BREADY : OUT STD_LOGIC;
    m_axi_din_gmem_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_din_gmem_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_din_gmem_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    din_gmem_V_offset_dout : IN STD_LOGIC_VECTOR (57 downto 0);
    din_gmem_V_offset_empty_n : IN STD_LOGIC;
    din_gmem_V_offset_read : OUT STD_LOGIC;
    tmp_29_cast_loc_chan : IN STD_LOGIC_VECTOR (63 downto 0);
    word_stream_V_data_V_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    word_stream_V_data_V_full_n : IN STD_LOGIC;
    word_stream_V_data_V_write : OUT STD_LOGIC;
    word_stream_V_strb_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    word_stream_V_strb_V_full_n : IN STD_LOGIC;
    word_stream_V_strb_V_write : OUT STD_LOGIC;
    word_stream_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    word_stream_V_last_V_full_n : IN STD_LOGIC;
    word_stream_V_last_V_write : OUT STD_LOGIC;
    read_mem_config_offs_5_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    read_mem_config_offs_5_empty_n : IN STD_LOGIC;
    read_mem_config_offs_5_read : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of op_mem_read_impl_Loo_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_40 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal din_gmem_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal din_gmem_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_i_i_reg_406 : STD_LOGIC_VECTOR (0 downto 0);
    signal din_gmem_V_offset_blk_n : STD_LOGIC;
    signal word_stream_V_data_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal exitcond_i_i_reg_406_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal word_stream_V_strb_V_blk_n : STD_LOGIC;
    signal word_stream_V_last_V_blk_n : STD_LOGIC;
    signal read_mem_config_offs_5_blk_n : STD_LOGIC;
    signal k_i_i_i_i_i_reg_219 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal din_gmem_V_offset_ca_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal din_gmem_V_offset_ca_reg_360 : STD_LOGIC_VECTOR (63 downto 0);
    signal read_mem_config_offs_3_reg_365 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_fu_244_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_reg_370 : STD_LOGIC_VECTOR (63 downto 0);
    signal read_burst_fu_273_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal read_burst_reg_378 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_30_i_i_i_i_i_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_i_i_fu_286_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_i_reg_385 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_ioackin_m_axi_din_gmem_V_ARREADY : STD_LOGIC;
    signal read_burst_cast_i_i_s_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal read_burst_cast_i_i_s_reg_401 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond_i_i_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal word_stream_V_data_V1_status : STD_LOGIC;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal k_fu_312_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_last_V_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_415 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_415_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal element_data_V_reg_420 : STD_LOGIC_VECTOR (511 downto 0);
    signal total_read_words_fu_337_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal total_read_words_i_i_reg_207 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_din_gmem_V_ARREADY : STD_LOGIC := '0';
    signal word_stream_V_data_V1_update : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal read_mem_config_offs_1_fu_148 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_i_i_i_i_i_fu_234_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal tmp_31_i_i_i_i_i_fu_258_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_i_i_i_i_i_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_263_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_i_i_53_fu_281_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_i_i_i_i_i_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_i_i_i_i_i_fu_322_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_30_i_i_i_i_i_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_din_gmem_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_din_gmem_V_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    if ((ap_sig_ioackin_m_axi_din_gmem_V_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_din_gmem_V_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_din_gmem_V_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_din_gmem_V_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    k_i_i_i_i_i_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_307_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_i_i_i_i_i_reg_219 <= k_fu_312_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                k_i_i_i_i_i_reg_219 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    read_mem_config_offs_1_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_307_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                read_mem_config_offs_1_fu_148 <= read_mem_config_offs_3_reg_365;
            elsif ((not(((din_gmem_V_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (read_mem_config_offs_5_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                read_mem_config_offs_1_fu_148 <= read_mem_config_offs_6;
            end if; 
        end if;
    end process;

    total_read_words_i_i_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                total_read_words_i_i_reg_207 <= total_read_words_fu_337_p2;
            elsif ((not(((din_gmem_V_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (read_mem_config_offs_5_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                total_read_words_i_i_reg_207 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((din_gmem_V_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (read_mem_config_offs_5_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    din_gmem_V_offset_ca_reg_360(57 downto 0) <= din_gmem_V_offset_ca_fu_230_p1(57 downto 0);
                read_mem_config_offs_3_reg_365 <= read_mem_config_offs_5_dout;
                    tmp_i_i_reg_370(57 downto 0) <= tmp_i_i_fu_244_p1(57 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_reg_406 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                element_data_V_reg_420 <= m_axi_din_gmem_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_i_i_reg_406 <= exitcond_i_i_fu_307_p2;
                exitcond_i_i_reg_406_pp0_iter1_reg <= exitcond_i_i_reg_406;
                tmp_last_V_reg_415_pp0_iter1_reg <= tmp_last_V_reg_415;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    read_burst_cast_i_i_s_reg_401(6 downto 0) <= read_burst_cast_i_i_s_fu_304_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_30_i_i_i_i_i_fu_253_p2 = ap_const_lv1_1))) then
                read_burst_reg_378 <= read_burst_fu_273_p3;
                sum_i_i_reg_385 <= sum_i_i_fu_286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_i_fu_307_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_last_V_reg_415 <= tmp_last_V_fu_328_p2;
            end if;
        end if;
    end process;
    din_gmem_V_offset_ca_reg_360(63 downto 58) <= "000000";
    tmp_i_i_reg_370(63 downto 58) <= "000000";
    read_burst_cast_i_i_s_reg_401(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, din_gmem_V_offset_empty_n, read_mem_config_offs_5_empty_n, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_state2, tmp_30_i_i_i_i_i_fu_253_p2, ap_sig_ioackin_m_axi_din_gmem_V_ARREADY, exitcond_i_i_fu_307_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((din_gmem_V_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (read_mem_config_offs_5_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_30_i_i_i_i_i_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_m_axi_din_gmem_V_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_i_i_fu_307_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_i_i_fu_307_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_din_gmem_V_RVALID, ap_enable_reg_pp0_iter1, exitcond_i_i_reg_406, ap_enable_reg_pp0_iter2, exitcond_i_i_reg_406_pp0_iter1_reg, word_stream_V_data_V1_status)
    begin
                ap_block_pp0_stage0_01001 <= (((exitcond_i_i_reg_406_pp0_iter1_reg = ap_const_lv1_0) and (word_stream_V_data_V1_status = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((exitcond_i_i_reg_406 = ap_const_lv1_0) and (m_axi_din_gmem_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_din_gmem_V_RVALID, ap_enable_reg_pp0_iter1, exitcond_i_i_reg_406, ap_enable_reg_pp0_iter2, exitcond_i_i_reg_406_pp0_iter1_reg, word_stream_V_data_V1_status)
    begin
                ap_block_pp0_stage0_11001 <= (((exitcond_i_i_reg_406_pp0_iter1_reg = ap_const_lv1_0) and (word_stream_V_data_V1_status = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((exitcond_i_i_reg_406 = ap_const_lv1_0) and (m_axi_din_gmem_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_din_gmem_V_RVALID, ap_enable_reg_pp0_iter1, exitcond_i_i_reg_406, ap_enable_reg_pp0_iter2, exitcond_i_i_reg_406_pp0_iter1_reg, word_stream_V_data_V1_status)
    begin
                ap_block_pp0_stage0_subdone <= (((exitcond_i_i_reg_406_pp0_iter1_reg = ap_const_lv1_0) and (word_stream_V_data_V1_status = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((exitcond_i_i_reg_406 = ap_const_lv1_0) and (m_axi_din_gmem_V_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, din_gmem_V_offset_empty_n, read_mem_config_offs_5_empty_n)
    begin
                ap_block_state1 <= ((din_gmem_V_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (read_mem_config_offs_5_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter1_assign_proc : process(m_axi_din_gmem_V_RVALID, exitcond_i_i_reg_406)
    begin
                ap_block_state11_pp0_stage0_iter1 <= ((exitcond_i_i_reg_406 = ap_const_lv1_0) and (m_axi_din_gmem_V_RVALID = ap_const_logic_0));
    end process;


    ap_block_state12_pp0_stage0_iter2_assign_proc : process(exitcond_i_i_reg_406_pp0_iter1_reg, word_stream_V_data_V1_status)
    begin
                ap_block_state12_pp0_stage0_iter2 <= ((exitcond_i_i_reg_406_pp0_iter1_reg = ap_const_lv1_0) and (word_stream_V_data_V1_status = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state10_assign_proc : process(exitcond_i_i_fu_307_p2)
    begin
        if ((exitcond_i_i_fu_307_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_30_i_i_i_i_i_fu_253_p2)
    begin
        if (((tmp_30_i_i_i_i_i_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_30_i_i_i_i_i_fu_253_p2)
    begin
        if (((tmp_30_i_i_i_i_i_fu_253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= read_mem_config_offs_1_fu_148;

    ap_sig_ioackin_m_axi_din_gmem_V_ARREADY_assign_proc : process(m_axi_din_gmem_V_ARREADY, ap_reg_ioackin_m_axi_din_gmem_V_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_din_gmem_V_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_din_gmem_V_ARREADY <= m_axi_din_gmem_V_ARREADY;
        else 
            ap_sig_ioackin_m_axi_din_gmem_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    din_gmem_V_blk_n_AR_assign_proc : process(m_axi_din_gmem_V_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            din_gmem_V_blk_n_AR <= m_axi_din_gmem_V_ARREADY;
        else 
            din_gmem_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    din_gmem_V_blk_n_R_assign_proc : process(m_axi_din_gmem_V_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_i_reg_406)
    begin
        if (((exitcond_i_i_reg_406 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            din_gmem_V_blk_n_R <= m_axi_din_gmem_V_RVALID;
        else 
            din_gmem_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    din_gmem_V_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, din_gmem_V_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            din_gmem_V_offset_blk_n <= din_gmem_V_offset_empty_n;
        else 
            din_gmem_V_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    din_gmem_V_offset_ca_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(din_gmem_V_offset_dout),64));

    din_gmem_V_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, din_gmem_V_offset_empty_n, read_mem_config_offs_5_empty_n)
    begin
        if ((not(((din_gmem_V_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (read_mem_config_offs_5_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            din_gmem_V_offset_read <= ap_const_logic_1;
        else 
            din_gmem_V_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_i_fu_307_p2 <= "1" when (k_i_i_i_i_i_reg_219 = read_burst_reg_378) else "0";
    k_fu_312_p2 <= std_logic_vector(unsigned(k_i_i_i_i_i_reg_219) + unsigned(ap_const_lv7_1));
    m_axi_din_gmem_V_ARADDR <= sum_i_i_reg_385;
    m_axi_din_gmem_V_ARBURST <= ap_const_lv2_0;
    m_axi_din_gmem_V_ARCACHE <= ap_const_lv4_0;
    m_axi_din_gmem_V_ARID <= ap_const_lv1_0;
    m_axi_din_gmem_V_ARLEN <= std_logic_vector(IEEE.numeric_std.resize(unsigned(read_burst_reg_378),32));
    m_axi_din_gmem_V_ARLOCK <= ap_const_lv2_0;
    m_axi_din_gmem_V_ARPROT <= ap_const_lv3_0;
    m_axi_din_gmem_V_ARQOS <= ap_const_lv4_0;
    m_axi_din_gmem_V_ARREGION <= ap_const_lv4_0;
    m_axi_din_gmem_V_ARSIZE <= ap_const_lv3_0;
    m_axi_din_gmem_V_ARUSER <= ap_const_lv1_0;

    m_axi_din_gmem_V_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_reg_ioackin_m_axi_din_gmem_V_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_din_gmem_V_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_din_gmem_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_din_gmem_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_din_gmem_V_AWADDR <= ap_const_lv64_0;
    m_axi_din_gmem_V_AWBURST <= ap_const_lv2_0;
    m_axi_din_gmem_V_AWCACHE <= ap_const_lv4_0;
    m_axi_din_gmem_V_AWID <= ap_const_lv1_0;
    m_axi_din_gmem_V_AWLEN <= ap_const_lv32_0;
    m_axi_din_gmem_V_AWLOCK <= ap_const_lv2_0;
    m_axi_din_gmem_V_AWPROT <= ap_const_lv3_0;
    m_axi_din_gmem_V_AWQOS <= ap_const_lv4_0;
    m_axi_din_gmem_V_AWREGION <= ap_const_lv4_0;
    m_axi_din_gmem_V_AWSIZE <= ap_const_lv3_0;
    m_axi_din_gmem_V_AWUSER <= ap_const_lv1_0;
    m_axi_din_gmem_V_AWVALID <= ap_const_logic_0;
    m_axi_din_gmem_V_BREADY <= ap_const_logic_0;

    m_axi_din_gmem_V_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_i_reg_406, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_i_reg_406 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_din_gmem_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_din_gmem_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_din_gmem_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_din_gmem_V_WID <= ap_const_lv1_0;
    m_axi_din_gmem_V_WLAST <= ap_const_logic_0;
    m_axi_din_gmem_V_WSTRB <= ap_const_lv64_0;
    m_axi_din_gmem_V_WUSER <= ap_const_lv1_0;
    m_axi_din_gmem_V_WVALID <= ap_const_logic_0;
    read_burst_cast_i_i_s_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(read_burst_reg_378),64));
    read_burst_fu_273_p3 <= 
        ap_const_lv7_40 when (tmp_32_i_i_i_i_i_fu_267_p2(0) = '1') else 
        tmp_fu_263_p1;

    read_mem_config_offs_5_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, read_mem_config_offs_5_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            read_mem_config_offs_5_blk_n <= read_mem_config_offs_5_empty_n;
        else 
            read_mem_config_offs_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    read_mem_config_offs_5_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, din_gmem_V_offset_empty_n, read_mem_config_offs_5_empty_n)
    begin
        if ((not(((din_gmem_V_offset_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (read_mem_config_offs_5_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            read_mem_config_offs_5_read <= ap_const_logic_1;
        else 
            read_mem_config_offs_5_read <= ap_const_logic_0;
        end if; 
    end process;

    sum_i_i_fu_286_p2 <= std_logic_vector(unsigned(din_gmem_V_offset_ca_reg_360) + unsigned(tmp_i_i_53_fu_281_p2));
    tmp_30_i_i_i_i_i_fu_253_p2 <= "1" when (unsigned(total_read_words_i_i_reg_207) < unsigned(read_words_cast_loc_s)) else "0";
    tmp_31_i_i_i_i_i_fu_258_p2 <= std_logic_vector(unsigned(read_words_cast_loc_s) - unsigned(total_read_words_i_i_reg_207));
    tmp_32_i_i_i_i_i_fu_267_p2 <= "1" when (unsigned(tmp_31_i_i_i_i_i_fu_258_p2) > unsigned(ap_const_lv64_40)) else "0";
    tmp_37_i_i_i_i_i_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_i_i_i_i_i_reg_219),64));
    tmp_43_i_i_i_i_i_fu_234_p4 <= read_mem_config_offs_5_dout(63 downto 6);
    tmp_44_i_i_i_i_i_fu_322_p2 <= std_logic_vector(unsigned(total_read_words_i_i_reg_207) + unsigned(tmp_37_i_i_i_i_i_fu_318_p1));
    tmp_fu_263_p1 <= tmp_31_i_i_i_i_i_fu_258_p2(7 - 1 downto 0);
    tmp_i_i_53_fu_281_p2 <= std_logic_vector(unsigned(tmp_i_i_reg_370) + unsigned(total_read_words_i_i_reg_207));
    tmp_i_i_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_i_i_i_i_i_fu_234_p4),64));
    tmp_last_V_fu_328_p2 <= "1" when (tmp_44_i_i_i_i_i_fu_322_p2 = tmp_29_cast_loc_chan) else "0";
    total_read_words_fu_337_p2 <= std_logic_vector(unsigned(read_burst_cast_i_i_s_reg_401) + unsigned(total_read_words_i_i_reg_207));
    word_stream_V_data_V1_status <= (word_stream_V_strb_V_full_n and word_stream_V_last_V_full_n and word_stream_V_data_V_full_n);

    word_stream_V_data_V1_update_assign_proc : process(ap_enable_reg_pp0_iter2, exitcond_i_i_reg_406_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_i_reg_406_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            word_stream_V_data_V1_update <= ap_const_logic_1;
        else 
            word_stream_V_data_V1_update <= ap_const_logic_0;
        end if; 
    end process;


    word_stream_V_data_V_blk_n_assign_proc : process(word_stream_V_data_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, exitcond_i_i_reg_406_pp0_iter1_reg)
    begin
        if (((exitcond_i_i_reg_406_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            word_stream_V_data_V_blk_n <= word_stream_V_data_V_full_n;
        else 
            word_stream_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    word_stream_V_data_V_din <= element_data_V_reg_420;
    word_stream_V_data_V_write <= word_stream_V_data_V1_update;

    word_stream_V_last_V_blk_n_assign_proc : process(word_stream_V_last_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, exitcond_i_i_reg_406_pp0_iter1_reg)
    begin
        if (((exitcond_i_i_reg_406_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            word_stream_V_last_V_blk_n <= word_stream_V_last_V_full_n;
        else 
            word_stream_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    word_stream_V_last_V_din <= tmp_last_V_reg_415_pp0_iter1_reg;
    word_stream_V_last_V_write <= word_stream_V_data_V1_update;

    word_stream_V_strb_V_blk_n_assign_proc : process(word_stream_V_strb_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, exitcond_i_i_reg_406_pp0_iter1_reg)
    begin
        if (((exitcond_i_i_reg_406_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            word_stream_V_strb_V_blk_n <= word_stream_V_strb_V_full_n;
        else 
            word_stream_V_strb_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    word_stream_V_strb_V_din <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    word_stream_V_strb_V_write <= word_stream_V_data_V1_update;
end behav;
