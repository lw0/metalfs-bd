-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity action_perfmon_read is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_mem_V_AWVALID : OUT STD_LOGIC;
    m_axi_mem_V_AWREADY : IN STD_LOGIC;
    m_axi_mem_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_WVALID : OUT STD_LOGIC;
    m_axi_mem_V_WREADY : IN STD_LOGIC;
    m_axi_mem_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_mem_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_V_WLAST : OUT STD_LOGIC;
    m_axi_mem_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_ARVALID : OUT STD_LOGIC;
    m_axi_mem_V_ARREADY : IN STD_LOGIC;
    m_axi_mem_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_RVALID : IN STD_LOGIC;
    m_axi_mem_V_RREADY : OUT STD_LOGIC;
    m_axi_mem_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_mem_V_RLAST : IN STD_LOGIC;
    m_axi_mem_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_V_BVALID : IN STD_LOGIC;
    m_axi_mem_V_BREADY : OUT STD_LOGIC;
    m_axi_mem_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mem_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
    mem_V_offset1 : IN STD_LOGIC_VECTOR (57 downto 0);
    m_axi_perfmon_ctrl_V_AWVALID : OUT STD_LOGIC;
    m_axi_perfmon_ctrl_V_AWREADY : IN STD_LOGIC;
    m_axi_perfmon_ctrl_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_perfmon_ctrl_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_perfmon_ctrl_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_perfmon_ctrl_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_perfmon_ctrl_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_perfmon_ctrl_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_perfmon_ctrl_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_perfmon_ctrl_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_perfmon_ctrl_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_perfmon_ctrl_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_perfmon_ctrl_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_perfmon_ctrl_V_WVALID : OUT STD_LOGIC;
    m_axi_perfmon_ctrl_V_WREADY : IN STD_LOGIC;
    m_axi_perfmon_ctrl_V_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_perfmon_ctrl_V_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_perfmon_ctrl_V_WLAST : OUT STD_LOGIC;
    m_axi_perfmon_ctrl_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_perfmon_ctrl_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_perfmon_ctrl_V_ARVALID : OUT STD_LOGIC;
    m_axi_perfmon_ctrl_V_ARREADY : IN STD_LOGIC;
    m_axi_perfmon_ctrl_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_perfmon_ctrl_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_perfmon_ctrl_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_perfmon_ctrl_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_perfmon_ctrl_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_perfmon_ctrl_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_perfmon_ctrl_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_perfmon_ctrl_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_perfmon_ctrl_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_perfmon_ctrl_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_perfmon_ctrl_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_perfmon_ctrl_V_RVALID : IN STD_LOGIC;
    m_axi_perfmon_ctrl_V_RREADY : OUT STD_LOGIC;
    m_axi_perfmon_ctrl_V_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_perfmon_ctrl_V_RLAST : IN STD_LOGIC;
    m_axi_perfmon_ctrl_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_perfmon_ctrl_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_perfmon_ctrl_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_perfmon_ctrl_V_BVALID : IN STD_LOGIC;
    m_axi_perfmon_ctrl_V_BREADY : OUT STD_LOGIC;
    m_axi_perfmon_ctrl_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_perfmon_ctrl_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_perfmon_ctrl_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of action_perfmon_read is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_40 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000";
    constant ap_const_lv64_44 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000100";
    constant ap_const_lv64_48 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001000";
    constant ap_const_lv64_4C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001001100";
    constant ap_const_lv64_50 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010000";
    constant ap_const_lv64_54 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001010100";
    constant ap_const_lv64_58 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001011000";
    constant ap_const_lv64_5C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001011100";
    constant ap_const_lv64_60 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001100000";
    constant ap_const_lv64_64 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001100100";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mem_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal mem_V_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal mem_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal perfmon_ctrl_V_blk_n_AR : STD_LOGIC;
    signal perfmon_ctrl_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY : STD_LOGIC;
    signal tmp_fu_298_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_858 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_71_trunc_i_reg_863 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_72_trunc_i_reg_868 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_73_trunc_i_reg_873 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_336_fu_339_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_336_reg_884 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_trunc_i_reg_889 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_68_trunc_i_reg_894 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_69_trunc_i_reg_899 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_trunc_i2_reg_910 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_102_trunc_i_reg_915 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_103_trunc_i_reg_920 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_337_fu_410_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_337_reg_925 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_trunc_i6_reg_936 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_99_trunc_i_reg_941 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_100_trunc_i_reg_946 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_338_fu_451_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_338_reg_951 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_trunc_i1_reg_962 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_96_trunc_i_reg_967 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_97_trunc_i_reg_972 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_339_fu_492_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_339_reg_977 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_trunc_i3_reg_988 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_93_trunc_i_reg_993 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_94_trunc_i_reg_998 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_340_fu_533_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_340_reg_1003 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_trunc_i4_reg_1008 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_90_trunc_i_reg_1013 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_91_trunc_i_reg_1018 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_341_fu_567_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_341_reg_1023 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_trunc_i5_reg_1028 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_87_trunc_i_reg_1033 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_88_trunc_i_reg_1038 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_342_fu_601_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_342_reg_1043 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_trunc_i7_reg_1048 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_84_trunc_i_reg_1053 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_85_trunc_i_reg_1058 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_343_fu_635_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_343_reg_1063 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_trunc_i8_reg_1068 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_81_trunc_i_reg_1073 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_82_trunc_i_reg_1078 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_344_fu_669_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_344_reg_1083 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_fu_681_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal sum_reg_1088 : STD_LOGIC_VECTOR (58 downto 0);
    signal r_V_trunc_i9_reg_1093 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_78_trunc_i_reg_1098 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_79_trunc_i_reg_1103 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_345_fu_717_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_345_reg_1108 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_ioackin_m_axi_mem_V_AWREADY : STD_LOGIC;
    signal r_V_trunc_i10_reg_1119 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_75_trunc_i_reg_1124 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_76_trunc_i_reg_1129 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_346_fu_761_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_346_reg_1134 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_cast_fu_721_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_mem_V_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_mem_V_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_mem_V_WREADY : STD_LOGIC;
    signal mem_V_offset_cast_ca_fu_673_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal mem_V_offset_cast_fu_677_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_s_fu_765_p49 : STD_LOGIC_VECTOR (383 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_mem_V_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_mem_V_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                    if (not(((ap_sig_ioackin_m_axi_mem_V_AWREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0)))) then 
                        ap_reg_ioackin_m_axi_mem_V_AWREADY <= ap_const_logic_0;
                    elsif (((m_axi_mem_V_AWREADY = ap_const_logic_1) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_mem_V_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_mem_V_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_mem_V_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    if ((ap_sig_ioackin_m_axi_mem_V_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_mem_V_WREADY <= ap_const_logic_0;
                    elsif ((m_axi_mem_V_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_mem_V_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY <= ap_const_logic_0;
            else
                if (((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or ((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
                    ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY <= ap_const_logic_0;
                elsif ((((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state8) and (m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1)))) then 
                    ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                r_V_100_trunc_i_reg_946 <= m_axi_perfmon_ctrl_V_RDATA(15 downto 8);
                r_V_99_trunc_i_reg_941 <= m_axi_perfmon_ctrl_V_RDATA(23 downto 16);
                r_V_trunc_i6_reg_936 <= m_axi_perfmon_ctrl_V_RDATA(31 downto 24);
                tmp_338_reg_951 <= tmp_338_fu_451_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                r_V_102_trunc_i_reg_915 <= m_axi_perfmon_ctrl_V_RDATA(23 downto 16);
                r_V_103_trunc_i_reg_920 <= m_axi_perfmon_ctrl_V_RDATA(15 downto 8);
                r_V_trunc_i2_reg_910 <= m_axi_perfmon_ctrl_V_RDATA(31 downto 24);
                tmp_337_reg_925 <= tmp_337_fu_410_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                r_V_68_trunc_i_reg_894 <= m_axi_perfmon_ctrl_V_RDATA(23 downto 16);
                r_V_69_trunc_i_reg_899 <= m_axi_perfmon_ctrl_V_RDATA(15 downto 8);
                r_V_trunc_i_reg_889 <= m_axi_perfmon_ctrl_V_RDATA(31 downto 24);
                tmp_336_reg_884 <= tmp_336_fu_339_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                r_V_71_trunc_i_reg_863 <= m_axi_perfmon_ctrl_V_RDATA(31 downto 24);
                r_V_72_trunc_i_reg_868 <= m_axi_perfmon_ctrl_V_RDATA(23 downto 16);
                r_V_73_trunc_i_reg_873 <= m_axi_perfmon_ctrl_V_RDATA(15 downto 8);
                tmp_reg_858 <= tmp_fu_298_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_m_axi_mem_V_AWREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                r_V_75_trunc_i_reg_1124 <= m_axi_perfmon_ctrl_V_RDATA(23 downto 16);
                r_V_76_trunc_i_reg_1129 <= m_axi_perfmon_ctrl_V_RDATA(15 downto 8);
                r_V_trunc_i10_reg_1119 <= m_axi_perfmon_ctrl_V_RDATA(31 downto 24);
                tmp_346_reg_1134 <= tmp_346_fu_761_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then
                r_V_78_trunc_i_reg_1098 <= m_axi_perfmon_ctrl_V_RDATA(23 downto 16);
                r_V_79_trunc_i_reg_1103 <= m_axi_perfmon_ctrl_V_RDATA(15 downto 8);
                r_V_trunc_i9_reg_1093 <= m_axi_perfmon_ctrl_V_RDATA(31 downto 24);
                sum_reg_1088 <= sum_fu_681_p2;
                tmp_345_reg_1108 <= tmp_345_fu_717_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then
                r_V_81_trunc_i_reg_1073 <= m_axi_perfmon_ctrl_V_RDATA(23 downto 16);
                r_V_82_trunc_i_reg_1078 <= m_axi_perfmon_ctrl_V_RDATA(15 downto 8);
                r_V_trunc_i8_reg_1068 <= m_axi_perfmon_ctrl_V_RDATA(31 downto 24);
                tmp_344_reg_1083 <= tmp_344_fu_669_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then
                r_V_84_trunc_i_reg_1053 <= m_axi_perfmon_ctrl_V_RDATA(23 downto 16);
                r_V_85_trunc_i_reg_1058 <= m_axi_perfmon_ctrl_V_RDATA(15 downto 8);
                r_V_trunc_i7_reg_1048 <= m_axi_perfmon_ctrl_V_RDATA(31 downto 24);
                tmp_343_reg_1063 <= tmp_343_fu_635_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then
                r_V_87_trunc_i_reg_1033 <= m_axi_perfmon_ctrl_V_RDATA(23 downto 16);
                r_V_88_trunc_i_reg_1038 <= m_axi_perfmon_ctrl_V_RDATA(15 downto 8);
                r_V_trunc_i5_reg_1028 <= m_axi_perfmon_ctrl_V_RDATA(31 downto 24);
                tmp_342_reg_1043 <= tmp_342_fu_601_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then
                r_V_90_trunc_i_reg_1013 <= m_axi_perfmon_ctrl_V_RDATA(23 downto 16);
                r_V_91_trunc_i_reg_1018 <= m_axi_perfmon_ctrl_V_RDATA(15 downto 8);
                r_V_trunc_i4_reg_1008 <= m_axi_perfmon_ctrl_V_RDATA(31 downto 24);
                tmp_341_reg_1023 <= tmp_341_fu_567_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then
                r_V_93_trunc_i_reg_993 <= m_axi_perfmon_ctrl_V_RDATA(23 downto 16);
                r_V_94_trunc_i_reg_998 <= m_axi_perfmon_ctrl_V_RDATA(15 downto 8);
                r_V_trunc_i3_reg_988 <= m_axi_perfmon_ctrl_V_RDATA(31 downto 24);
                tmp_340_reg_1003 <= tmp_340_fu_533_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                r_V_96_trunc_i_reg_967 <= m_axi_perfmon_ctrl_V_RDATA(23 downto 16);
                r_V_97_trunc_i_reg_972 <= m_axi_perfmon_ctrl_V_RDATA(15 downto 8);
                r_V_trunc_i1_reg_962 <= m_axi_perfmon_ctrl_V_RDATA(31 downto 24);
                tmp_339_reg_977 <= tmp_339_fu_492_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_mem_V_BVALID, m_axi_perfmon_ctrl_V_RVALID, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY, ap_sig_ioackin_m_axi_mem_V_AWREADY, ap_sig_ioackin_m_axi_mem_V_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if ((not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if ((not(((ap_sig_ioackin_m_axi_mem_V_AWREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_sig_ioackin_m_axi_mem_V_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((m_axi_mem_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_mem_V_BVALID, ap_CS_fsm_state25)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((m_axi_mem_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_mem_V_BVALID, ap_CS_fsm_state25)
    begin
        if (((m_axi_mem_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_mem_V_AWREADY_assign_proc : process(m_axi_mem_V_AWREADY, ap_reg_ioackin_m_axi_mem_V_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_mem_V_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_mem_V_AWREADY <= m_axi_mem_V_AWREADY;
        else 
            ap_sig_ioackin_m_axi_mem_V_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_mem_V_WREADY_assign_proc : process(m_axi_mem_V_WREADY, ap_reg_ioackin_m_axi_mem_V_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_mem_V_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_mem_V_WREADY <= m_axi_mem_V_WREADY;
        else 
            ap_sig_ioackin_m_axi_mem_V_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY_assign_proc : process(m_axi_perfmon_ctrl_V_ARREADY, ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY <= m_axi_perfmon_ctrl_V_ARREADY;
        else 
            ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_mem_V_ARADDR <= ap_const_lv64_0;
    m_axi_mem_V_ARBURST <= ap_const_lv2_0;
    m_axi_mem_V_ARCACHE <= ap_const_lv4_0;
    m_axi_mem_V_ARID <= ap_const_lv1_0;
    m_axi_mem_V_ARLEN <= ap_const_lv32_0;
    m_axi_mem_V_ARLOCK <= ap_const_lv2_0;
    m_axi_mem_V_ARPROT <= ap_const_lv3_0;
    m_axi_mem_V_ARQOS <= ap_const_lv4_0;
    m_axi_mem_V_ARREGION <= ap_const_lv4_0;
    m_axi_mem_V_ARSIZE <= ap_const_lv3_0;
    m_axi_mem_V_ARUSER <= ap_const_lv1_0;
    m_axi_mem_V_ARVALID <= ap_const_logic_0;
    m_axi_mem_V_AWADDR <= sum_cast_fu_721_p1;
    m_axi_mem_V_AWBURST <= ap_const_lv2_0;
    m_axi_mem_V_AWCACHE <= ap_const_lv4_0;
    m_axi_mem_V_AWID <= ap_const_lv1_0;
    m_axi_mem_V_AWLEN <= ap_const_lv32_1;
    m_axi_mem_V_AWLOCK <= ap_const_lv2_0;
    m_axi_mem_V_AWPROT <= ap_const_lv3_0;
    m_axi_mem_V_AWQOS <= ap_const_lv4_0;
    m_axi_mem_V_AWREGION <= ap_const_lv4_0;
    m_axi_mem_V_AWSIZE <= ap_const_lv3_0;
    m_axi_mem_V_AWUSER <= ap_const_lv1_0;

    m_axi_mem_V_AWVALID_assign_proc : process(m_axi_perfmon_ctrl_V_RVALID, ap_CS_fsm_state19, ap_reg_ioackin_m_axi_mem_V_AWREADY)
    begin
        if (((ap_reg_ioackin_m_axi_mem_V_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state19) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then 
            m_axi_mem_V_AWVALID <= ap_const_logic_1;
        else 
            m_axi_mem_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_mem_V_BREADY_assign_proc : process(m_axi_mem_V_BVALID, ap_CS_fsm_state25)
    begin
        if (((m_axi_mem_V_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            m_axi_mem_V_BREADY <= ap_const_logic_1;
        else 
            m_axi_mem_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_V_RREADY <= ap_const_logic_0;
    m_axi_mem_V_WDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_765_p49),512));
    m_axi_mem_V_WID <= ap_const_lv1_0;
    m_axi_mem_V_WLAST <= ap_const_logic_0;
    m_axi_mem_V_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_mem_V_WUSER <= ap_const_lv1_0;

    m_axi_mem_V_WVALID_assign_proc : process(ap_CS_fsm_state20, ap_reg_ioackin_m_axi_mem_V_WREADY)
    begin
        if (((ap_reg_ioackin_m_axi_mem_V_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            m_axi_mem_V_WVALID <= ap_const_logic_1;
        else 
            m_axi_mem_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_perfmon_ctrl_V_ARADDR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_perfmon_ctrl_V_RVALID, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0)) then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then 
                m_axi_perfmon_ctrl_V_ARADDR <= ap_const_lv64_64;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then 
                m_axi_perfmon_ctrl_V_ARADDR <= ap_const_lv64_60;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then 
                m_axi_perfmon_ctrl_V_ARADDR <= ap_const_lv64_5C;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then 
                m_axi_perfmon_ctrl_V_ARADDR <= ap_const_lv64_58;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1))) then 
                m_axi_perfmon_ctrl_V_ARADDR <= ap_const_lv64_54;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                m_axi_perfmon_ctrl_V_ARADDR <= ap_const_lv64_50;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                m_axi_perfmon_ctrl_V_ARADDR <= ap_const_lv64_4C;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                m_axi_perfmon_ctrl_V_ARADDR <= ap_const_lv64_48;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                m_axi_perfmon_ctrl_V_ARADDR <= ap_const_lv64_44;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_axi_perfmon_ctrl_V_ARADDR <= ap_const_lv64_40;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                m_axi_perfmon_ctrl_V_ARADDR <= ap_const_lv64_0;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                m_axi_perfmon_ctrl_V_ARADDR <= ap_const_lv64_1;
            else 
                m_axi_perfmon_ctrl_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_perfmon_ctrl_V_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_perfmon_ctrl_V_ARBURST <= ap_const_lv2_0;
    m_axi_perfmon_ctrl_V_ARCACHE <= ap_const_lv4_0;
    m_axi_perfmon_ctrl_V_ARID <= ap_const_lv1_0;
    m_axi_perfmon_ctrl_V_ARLEN <= ap_const_lv32_1;
    m_axi_perfmon_ctrl_V_ARLOCK <= ap_const_lv2_0;
    m_axi_perfmon_ctrl_V_ARPROT <= ap_const_lv3_0;
    m_axi_perfmon_ctrl_V_ARQOS <= ap_const_lv4_0;
    m_axi_perfmon_ctrl_V_ARREGION <= ap_const_lv4_0;
    m_axi_perfmon_ctrl_V_ARSIZE <= ap_const_lv3_0;
    m_axi_perfmon_ctrl_V_ARUSER <= ap_const_lv1_0;

    m_axi_perfmon_ctrl_V_ARVALID_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_perfmon_ctrl_V_RVALID, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY)
    begin
        if ((((ap_start = ap_const_logic_1) and (ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state12) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1)) or ((ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1)) or ((ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1)) or ((ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1)) or ((ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_reg_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1)))) then 
            m_axi_perfmon_ctrl_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_perfmon_ctrl_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_perfmon_ctrl_V_AWADDR <= ap_const_lv64_0;
    m_axi_perfmon_ctrl_V_AWBURST <= ap_const_lv2_0;
    m_axi_perfmon_ctrl_V_AWCACHE <= ap_const_lv4_0;
    m_axi_perfmon_ctrl_V_AWID <= ap_const_lv1_0;
    m_axi_perfmon_ctrl_V_AWLEN <= ap_const_lv32_0;
    m_axi_perfmon_ctrl_V_AWLOCK <= ap_const_lv2_0;
    m_axi_perfmon_ctrl_V_AWPROT <= ap_const_lv3_0;
    m_axi_perfmon_ctrl_V_AWQOS <= ap_const_lv4_0;
    m_axi_perfmon_ctrl_V_AWREGION <= ap_const_lv4_0;
    m_axi_perfmon_ctrl_V_AWSIZE <= ap_const_lv3_0;
    m_axi_perfmon_ctrl_V_AWUSER <= ap_const_lv1_0;
    m_axi_perfmon_ctrl_V_AWVALID <= ap_const_logic_0;
    m_axi_perfmon_ctrl_V_BREADY <= ap_const_logic_0;

    m_axi_perfmon_ctrl_V_RREADY_assign_proc : process(m_axi_perfmon_ctrl_V_RVALID, ap_CS_fsm_state19, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY, ap_sig_ioackin_m_axi_mem_V_AWREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state18) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_1)) or (not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((ap_sig_ioackin_m_axi_perfmon_ctrl_V_ARREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((ap_sig_ioackin_m_axi_mem_V_AWREADY = ap_const_logic_0) or (m_axi_perfmon_ctrl_V_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            m_axi_perfmon_ctrl_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_perfmon_ctrl_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_perfmon_ctrl_V_WDATA <= ap_const_lv32_0;
    m_axi_perfmon_ctrl_V_WID <= ap_const_lv1_0;
    m_axi_perfmon_ctrl_V_WLAST <= ap_const_logic_0;
    m_axi_perfmon_ctrl_V_WSTRB <= ap_const_lv4_0;
    m_axi_perfmon_ctrl_V_WUSER <= ap_const_lv1_0;
    m_axi_perfmon_ctrl_V_WVALID <= ap_const_logic_0;

    mem_V_blk_n_AW_assign_proc : process(m_axi_mem_V_AWREADY, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            mem_V_blk_n_AW <= m_axi_mem_V_AWREADY;
        else 
            mem_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    mem_V_blk_n_B_assign_proc : process(m_axi_mem_V_BVALID, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            mem_V_blk_n_B <= m_axi_mem_V_BVALID;
        else 
            mem_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    mem_V_blk_n_W_assign_proc : process(m_axi_mem_V_WREADY, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            mem_V_blk_n_W <= m_axi_mem_V_WREADY;
        else 
            mem_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    mem_V_offset_cast_ca_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_V_offset1),59));
    mem_V_offset_cast_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_V_offset),59));

    perfmon_ctrl_V_blk_n_AR_assign_proc : process(ap_start, ap_CS_fsm_state1, m_axi_perfmon_ctrl_V_ARREADY, ap_CS_fsm_state8, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state4, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            perfmon_ctrl_V_blk_n_AR <= m_axi_perfmon_ctrl_V_ARREADY;
        else 
            perfmon_ctrl_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    perfmon_ctrl_V_blk_n_R_assign_proc : process(m_axi_perfmon_ctrl_V_RVALID, ap_CS_fsm_state19, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            perfmon_ctrl_V_blk_n_R <= m_axi_perfmon_ctrl_V_RVALID;
        else 
            perfmon_ctrl_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    sum_cast_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_reg_1088),64));
    sum_fu_681_p2 <= std_logic_vector(unsigned(mem_V_offset_cast_ca_fu_673_p1) + unsigned(mem_V_offset_cast_fu_677_p1));
    tmp_336_fu_339_p1 <= m_axi_perfmon_ctrl_V_RDATA(8 - 1 downto 0);
    tmp_337_fu_410_p1 <= m_axi_perfmon_ctrl_V_RDATA(8 - 1 downto 0);
    tmp_338_fu_451_p1 <= m_axi_perfmon_ctrl_V_RDATA(8 - 1 downto 0);
    tmp_339_fu_492_p1 <= m_axi_perfmon_ctrl_V_RDATA(8 - 1 downto 0);
    tmp_340_fu_533_p1 <= m_axi_perfmon_ctrl_V_RDATA(8 - 1 downto 0);
    tmp_341_fu_567_p1 <= m_axi_perfmon_ctrl_V_RDATA(8 - 1 downto 0);
    tmp_342_fu_601_p1 <= m_axi_perfmon_ctrl_V_RDATA(8 - 1 downto 0);
    tmp_343_fu_635_p1 <= m_axi_perfmon_ctrl_V_RDATA(8 - 1 downto 0);
    tmp_344_fu_669_p1 <= m_axi_perfmon_ctrl_V_RDATA(8 - 1 downto 0);
    tmp_345_fu_717_p1 <= m_axi_perfmon_ctrl_V_RDATA(8 - 1 downto 0);
    tmp_346_fu_761_p1 <= m_axi_perfmon_ctrl_V_RDATA(8 - 1 downto 0);
    tmp_fu_298_p1 <= m_axi_perfmon_ctrl_V_RDATA(8 - 1 downto 0);
    tmp_s_fu_765_p49 <= (((((((((((((((((((((((((((((((((((((((((((((((tmp_346_reg_1134 & r_V_76_trunc_i_reg_1129) & r_V_75_trunc_i_reg_1124) & r_V_trunc_i10_reg_1119) & tmp_345_reg_1108) & r_V_79_trunc_i_reg_1103) & r_V_78_trunc_i_reg_1098) & r_V_trunc_i9_reg_1093) & tmp_344_reg_1083) & r_V_82_trunc_i_reg_1078) & r_V_81_trunc_i_reg_1073) & r_V_trunc_i8_reg_1068) & tmp_343_reg_1063) & r_V_85_trunc_i_reg_1058) & r_V_84_trunc_i_reg_1053) & r_V_trunc_i7_reg_1048) & tmp_342_reg_1043) & r_V_88_trunc_i_reg_1038) & r_V_87_trunc_i_reg_1033) & r_V_trunc_i5_reg_1028) & tmp_341_reg_1023) & r_V_91_trunc_i_reg_1018) & r_V_90_trunc_i_reg_1013) & r_V_trunc_i4_reg_1008) & tmp_340_reg_1003) & r_V_94_trunc_i_reg_998) & r_V_93_trunc_i_reg_993) & r_V_trunc_i3_reg_988) & tmp_339_reg_977) & r_V_97_trunc_i_reg_972) & r_V_96_trunc_i_reg_967) & r_V_trunc_i1_reg_962) & tmp_338_reg_951) & r_V_100_trunc_i_reg_946) & r_V_99_trunc_i_reg_941) & r_V_trunc_i6_reg_936) & tmp_337_reg_925) & r_V_103_trunc_i_reg_920) & r_V_102_trunc_i_reg_915) & r_V_trunc_i2_reg_910) & tmp_reg_858) & r_V_73_trunc_i_reg_873) & r_V_72_trunc_i_reg_868) & r_V_71_trunc_i_reg_863) & tmp_336_reg_884) & r_V_69_trunc_i_reg_899) & r_V_68_trunc_i_reg_894) & r_V_trunc_i_reg_889);
end behav;
