-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity op_mem_read_impl_Loo_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    word_stream_V_data_V_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    word_stream_V_data_V_empty_n : IN STD_LOGIC;
    word_stream_V_data_V_read : OUT STD_LOGIC;
    word_stream_V_strb_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    word_stream_V_strb_V_empty_n : IN STD_LOGIC;
    word_stream_V_strb_V_read : OUT STD_LOGIC;
    word_stream_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    word_stream_V_last_V_empty_n : IN STD_LOGIC;
    word_stream_V_last_V_read : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (63 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (63 downto 0);
    word_stream_with_strb_V_data_V_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    word_stream_with_strb_V_data_V_full_n : IN STD_LOGIC;
    word_stream_with_strb_V_data_V_write : OUT STD_LOGIC;
    word_stream_with_strb_V_strb_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    word_stream_with_strb_V_strb_V_full_n : IN STD_LOGIC;
    word_stream_with_strb_V_strb_V_write : OUT STD_LOGIC;
    word_stream_with_strb_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    word_stream_with_strb_V_last_V_full_n : IN STD_LOGIC;
    word_stream_with_strb_V_last_V_write : OUT STD_LOGIC );
end;


architecture behav of op_mem_read_impl_Loo_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal word_stream_V_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal word_stream_V_strb_V_blk_n : STD_LOGIC;
    signal word_stream_V_last_V_blk_n : STD_LOGIC;
    signal word_stream_with_strb_V_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal word_stream_with_strb_V_strb_V_blk_n : STD_LOGIC;
    signal word_stream_with_strb_V_last_V_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal tmp_data_V_reg_220 : STD_LOGIC_VECTOR (511 downto 0);
    signal word_stream_V_data_V0_status : STD_LOGIC;
    signal tmp_last_V_reg_225 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_strb_V_fu_198_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_strb_V_reg_230 : STD_LOGIC_VECTOR (63 downto 0);
    signal word_count_fu_204_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal word_count_reg_235 : STD_LOGIC_VECTOR (63 downto 0);
    signal word_count_i_reg_149 : STD_LOGIC_VECTOR (63 downto 0);
    signal word_stream_with_strb_V_data_V1_status : STD_LOGIC;
    signal word_stream_V_data_V0_update : STD_LOGIC;
    signal word_stream_with_strb_V_data_V1_update : STD_LOGIC;
    signal tmp_45_i_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal element_strb_V_3_i_fu_178_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal element_strb_V_4_i_fu_185_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_192_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_last_V_reg_225 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (word_stream_with_strb_V_data_V1_status = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    word_count_i_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_last_V_reg_225 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (word_stream_with_strb_V_data_V1_status = ap_const_logic_1))) then 
                word_count_i_reg_149 <= word_count_reg_235;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                word_count_i_reg_149 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((word_stream_V_data_V0_status = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_V_reg_220 <= word_stream_V_data_V_dout;
                tmp_last_V_reg_225 <= word_stream_V_last_V_dout;
                tmp_strb_V_reg_230 <= tmp_strb_V_fu_198_p2;
                word_count_reg_235 <= word_count_fu_204_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, word_stream_V_data_V0_status, tmp_last_V_reg_225, word_stream_with_strb_V_data_V1_status)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((word_stream_V_data_V0_status = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_last_V_reg_225 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (word_stream_with_strb_V_data_V1_status = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((tmp_last_V_reg_225 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (word_stream_with_strb_V_data_V1_status = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3, tmp_last_V_reg_225, word_stream_with_strb_V_data_V1_status)
    begin
        if (((tmp_last_V_reg_225 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (word_stream_with_strb_V_data_V1_status = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    element_strb_V_3_i_fu_178_p3 <= 
        p_read when (tmp_45_i_fu_172_p2(0) = '1') else 
        ap_const_lv64_FFFFFFFFFFFFFFFF;
    element_strb_V_4_i_fu_185_p3 <= 
        p_read1 when (word_stream_V_last_V_dout(0) = '1') else 
        ap_const_lv64_FFFFFFFFFFFFFFFF;

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state3, tmp_last_V_reg_225, word_stream_with_strb_V_data_V1_status)
    begin
        if (((tmp_last_V_reg_225 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (word_stream_with_strb_V_data_V1_status = ap_const_logic_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_45_i_fu_172_p2 <= "1" when (word_count_i_reg_149 = ap_const_lv64_0) else "0";
    tmp_fu_192_p2 <= (element_strb_V_4_i_fu_185_p3 and element_strb_V_3_i_fu_178_p3);
    tmp_strb_V_fu_198_p2 <= (word_stream_V_strb_V_dout and tmp_fu_192_p2);
    word_count_fu_204_p2 <= std_logic_vector(unsigned(word_count_i_reg_149) + unsigned(ap_const_lv64_1));
    word_stream_V_data_V0_status <= (word_stream_V_strb_V_empty_n and word_stream_V_last_V_empty_n and word_stream_V_data_V_empty_n);

    word_stream_V_data_V0_update_assign_proc : process(ap_CS_fsm_state2, word_stream_V_data_V0_status)
    begin
        if (((word_stream_V_data_V0_status = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            word_stream_V_data_V0_update <= ap_const_logic_1;
        else 
            word_stream_V_data_V0_update <= ap_const_logic_0;
        end if; 
    end process;


    word_stream_V_data_V_blk_n_assign_proc : process(word_stream_V_data_V_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_stream_V_data_V_blk_n <= word_stream_V_data_V_empty_n;
        else 
            word_stream_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    word_stream_V_data_V_read <= word_stream_V_data_V0_update;

    word_stream_V_last_V_blk_n_assign_proc : process(word_stream_V_last_V_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_stream_V_last_V_blk_n <= word_stream_V_last_V_empty_n;
        else 
            word_stream_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    word_stream_V_last_V_read <= word_stream_V_data_V0_update;

    word_stream_V_strb_V_blk_n_assign_proc : process(word_stream_V_strb_V_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_stream_V_strb_V_blk_n <= word_stream_V_strb_V_empty_n;
        else 
            word_stream_V_strb_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    word_stream_V_strb_V_read <= word_stream_V_data_V0_update;
    word_stream_with_strb_V_data_V1_status <= (word_stream_with_strb_V_strb_V_full_n and word_stream_with_strb_V_last_V_full_n and word_stream_with_strb_V_data_V_full_n);

    word_stream_with_strb_V_data_V1_update_assign_proc : process(ap_CS_fsm_state3, word_stream_with_strb_V_data_V1_status)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (word_stream_with_strb_V_data_V1_status = ap_const_logic_1))) then 
            word_stream_with_strb_V_data_V1_update <= ap_const_logic_1;
        else 
            word_stream_with_strb_V_data_V1_update <= ap_const_logic_0;
        end if; 
    end process;


    word_stream_with_strb_V_data_V_blk_n_assign_proc : process(word_stream_with_strb_V_data_V_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            word_stream_with_strb_V_data_V_blk_n <= word_stream_with_strb_V_data_V_full_n;
        else 
            word_stream_with_strb_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    word_stream_with_strb_V_data_V_din <= tmp_data_V_reg_220;
    word_stream_with_strb_V_data_V_write <= word_stream_with_strb_V_data_V1_update;

    word_stream_with_strb_V_last_V_blk_n_assign_proc : process(word_stream_with_strb_V_last_V_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            word_stream_with_strb_V_last_V_blk_n <= word_stream_with_strb_V_last_V_full_n;
        else 
            word_stream_with_strb_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    word_stream_with_strb_V_last_V_din <= tmp_last_V_reg_225;
    word_stream_with_strb_V_last_V_write <= word_stream_with_strb_V_data_V1_update;

    word_stream_with_strb_V_strb_V_blk_n_assign_proc : process(word_stream_with_strb_V_strb_V_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            word_stream_with_strb_V_strb_V_blk_n <= word_stream_with_strb_V_strb_V_full_n;
        else 
            word_stream_with_strb_V_strb_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    word_stream_with_strb_V_strb_V_din <= tmp_strb_V_reg_230;
    word_stream_with_strb_V_strb_V_write <= word_stream_with_strb_V_data_V1_update;
end behav;
