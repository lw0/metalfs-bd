-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bf_encrypt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    left_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    right_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    key_g_P_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    key_g_P_V_ce0 : OUT STD_LOGIC;
    key_g_P_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    key_g_P_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    key_g_P_V_ce1 : OUT STD_LOGIC;
    key_g_P_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    key_g_S_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    key_g_S_V_ce0 : OUT STD_LOGIC;
    key_g_S_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    key_g_S_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    key_g_S_V_ce1 : OUT STD_LOGIC;
    key_g_S_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of bf_encrypt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv10_100 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_const_lv11_300 : STD_LOGIC_VECTOR (10 downto 0) := "01100000000";
    constant ap_const_lv55_1 : STD_LOGIC_VECTOR (54 downto 0) := "0000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_225 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_229_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_324_fu_242_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_324_reg_675 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_fu_246_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_reg_680 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op_V_read_assign_reg_695 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_107_reg_700 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_V_reg_705 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_109_fu_328_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_109_reg_710 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_112_fu_338_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_112_reg_715 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_106_fu_384_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_106_reg_735 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_108_fu_390_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_108_reg_740 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_110_fu_396_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_110_reg_745 : STD_LOGIC_VECTOR (8 downto 0);
    signal agg_result_V_i_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_V_i_reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_116_fu_457_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_116_reg_760 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_117_fu_463_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_117_reg_765 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_118_fu_469_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_118_reg_770 : STD_LOGIC_VECTOR (8 downto 0);
    signal op_V_read_assign_4_fu_514_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op_V_read_assign_4_reg_780 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_120_reg_785 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_V_3_reg_790 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_121_fu_587_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_121_reg_795 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_123_fu_597_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_123_reg_800 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal agg_result_V_i1_fu_629_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_V_i1_reg_825 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_16_fu_635_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal left_V_reg_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_V_reg_192 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_202 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_92_i_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_191_cast_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_111_fu_376_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_193_cast_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_92_i8_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_195_cast_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_122_fu_611_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_197_cast_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_307_fu_272_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_306_fu_268_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_305_fu_264_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_304_fu_260_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_04_cast1_fu_276_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_303_fu_256_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_302_fu_252_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_04_cast_fu_282_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_308_fu_314_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_93_i_cast_fu_324_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal d_V_fu_308_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_97_i_cast_fu_334_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_313_fu_368_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_314_fu_372_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_311_fu_360_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_312_fu_364_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_309_fu_352_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_310_fu_356_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_317_fu_414_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_316_fu_410_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_315_fu_406_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_96_i_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_320_fu_442_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_115_fu_446_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_319_fu_433_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_114_fu_437_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_318_fu_424_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_113_fu_428_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_fu_475_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_119_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_327_fu_505_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp1_fu_520_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_321_fu_485_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_326_fu_501_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp2_fu_531_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_322_fu_489_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_02_cast1_fu_525_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_325_fu_497_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_562_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_323_fu_493_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_02_cast_fu_536_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_328_fu_573_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_93_i9_cast_fu_583_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal d_V_3_fu_567_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_97_i1_cast_fu_593_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_96_i1_fu_623_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_return_0_preg <= tmp_17_fu_639_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_return_1_preg <= grp_fu_213_p2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_reg_202 <= i_5_reg_680;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_202 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    left_V_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                left_V_reg_182 <= tmp_16_fu_635_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                left_V_reg_182 <= left_V_read;
            end if; 
        end if;
    end process;

    right_V_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                right_V_reg_192 <= op_V_read_assign_4_reg_780;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                right_V_reg_192 <= right_V_read;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                agg_result_V_i1_reg_825 <= agg_result_V_i1_fu_629_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                agg_result_V_i_reg_755 <= agg_result_V_i_fu_451_p2;
                tmp_116_reg_760 <= tmp_116_fu_457_p2;
                tmp_117_reg_765 <= tmp_117_fu_463_p2;
                tmp_118_reg_770 <= tmp_118_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                c_V_3_reg_790 <= p_02_cast1_fu_525_p2(16 downto 8);
                op_V_read_assign_4_reg_780 <= op_V_read_assign_4_fu_514_p2;
                tmp_120_reg_785 <= op_V_read_assign_4_fu_514_p2(31 downto 24);
                tmp_121_reg_795 <= tmp_121_fu_587_p2;
                tmp_123_reg_800 <= tmp_123_fu_597_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_V_reg_705 <= p_04_cast1_fu_276_p2(16 downto 8);
                op_V_read_assign_reg_695 <= grp_fu_213_p2;
                tmp_107_reg_700 <= grp_fu_213_p2(31 downto 24);
                tmp_109_reg_710 <= tmp_109_fu_328_p2;
                tmp_112_reg_715 <= tmp_112_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_229_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_5_reg_680 <= i_5_fu_246_p2;
                tmp_324_reg_675 <= tmp_324_fu_242_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then
                reg_225 <= grp_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_106_reg_735 <= tmp_106_fu_384_p2;
                tmp_108_reg_740 <= tmp_108_fu_390_p2;
                tmp_110_reg_745 <= tmp_110_fu_396_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_229_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_229_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    agg_result_V_i1_fu_629_p2 <= std_logic_vector(unsigned(key_g_S_V_q1) + unsigned(tmp_96_i1_fu_623_p2));
    agg_result_V_i_fu_451_p2 <= std_logic_vector(unsigned(key_g_S_V_q1) + unsigned(tmp_96_i_fu_418_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state12, tmp_17_fu_639_p2, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_return_0 <= tmp_17_fu_639_p2;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(grp_fu_213_p2, ap_CS_fsm_state12, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_return_1 <= grp_fu_213_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    d_V_3_fu_567_p2 <= (tmp_323_fu_493_p1 xor tmp3_fu_562_p2);
    d_V_fu_308_p2 <= (tmp_303_fu_256_p1 xor tmp_302_fu_252_p1);
    grp_fu_213_p2 <= (left_V_reg_182 xor key_g_P_V_q0);
    grp_fu_219_p2 <= std_logic_vector(unsigned(key_g_S_V_q0) + unsigned(key_g_S_V_q1));
    i_5_fu_246_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(i_reg_202));

    key_g_P_V_address0_assign_proc : process(ap_CS_fsm_state2, tmp_fu_229_p3, tmp_s_fu_237_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
            if ((tmp_fu_229_p3 = ap_const_lv1_1)) then 
                key_g_P_V_address0 <= ap_const_lv64_10(5 - 1 downto 0);
            elsif ((tmp_fu_229_p3 = ap_const_lv1_0)) then 
                key_g_P_V_address0 <= tmp_s_fu_237_p1(5 - 1 downto 0);
            else 
                key_g_P_V_address0 <= "XXXXX";
            end if;
        else 
            key_g_P_V_address0 <= "XXXXX";
        end if; 
    end process;


    key_g_P_V_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, tmp_15_fu_480_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            key_g_P_V_address1 <= tmp_15_fu_480_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            key_g_P_V_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        else 
            key_g_P_V_address1 <= "XXXXX";
        end if; 
    end process;


    key_g_P_V_ce0_assign_proc : process(ap_CS_fsm_state2, tmp_fu_229_p3)
    begin
        if ((((tmp_fu_229_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((tmp_fu_229_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            key_g_P_V_ce0 <= ap_const_logic_1;
        else 
            key_g_P_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    key_g_P_V_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            key_g_P_V_ce1 <= ap_const_logic_1;
        else 
            key_g_P_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    key_g_S_V_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state8, tmp_92_i_fu_344_p1, tmp_111_fu_376_p3, tmp_92_i8_fu_603_p1, tmp_122_fu_611_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            key_g_S_V_address0 <= tmp_122_fu_611_p3(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            key_g_S_V_address0 <= tmp_92_i8_fu_603_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            key_g_S_V_address0 <= tmp_111_fu_376_p3(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            key_g_S_V_address0 <= tmp_92_i_fu_344_p1(13 - 1 downto 0);
        else 
            key_g_S_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    key_g_S_V_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state8, tmp_191_cast_fu_348_p1, tmp_193_cast_fu_402_p1, tmp_195_cast_fu_607_p1, tmp_197_cast_fu_619_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            key_g_S_V_address1 <= tmp_197_cast_fu_619_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            key_g_S_V_address1 <= tmp_195_cast_fu_607_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            key_g_S_V_address1 <= tmp_193_cast_fu_402_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            key_g_S_V_address1 <= tmp_191_cast_fu_348_p1(13 - 1 downto 0);
        else 
            key_g_S_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    key_g_S_V_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            key_g_S_V_ce0 <= ap_const_logic_1;
        else 
            key_g_S_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    key_g_S_V_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            key_g_S_V_ce1 <= ap_const_logic_1;
        else 
            key_g_S_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    op_V_read_assign_4_fu_514_p2 <= (tmp_119_fu_509_p2 xor right_V_reg_192);
    p_02_cast1_fu_525_p2 <= (tmp_321_fu_485_p1 xor tmp1_fu_520_p2);
    p_02_cast_fu_536_p2 <= (tmp_322_fu_489_p1 xor tmp2_fu_531_p2);
    p_04_cast1_fu_276_p2 <= (tmp_307_fu_272_p1 xor tmp_306_fu_268_p1);
    p_04_cast_fu_282_p2 <= (tmp_305_fu_264_p1 xor tmp_304_fu_260_p1);
    tmp1_fu_520_p2 <= (tmp_327_fu_505_p1 xor tmp_116_reg_760);
    tmp2_fu_531_p2 <= (tmp_326_fu_501_p1 xor tmp_117_reg_765);
    tmp3_fu_562_p2 <= (tmp_325_fu_497_p1 xor tmp_118_reg_770);
    tmp_106_fu_384_p2 <= std_logic_vector(unsigned(tmp_313_fu_368_p1) + unsigned(tmp_314_fu_372_p1));
    tmp_108_fu_390_p2 <= std_logic_vector(unsigned(tmp_311_fu_360_p1) + unsigned(tmp_312_fu_364_p1));
    tmp_109_fu_328_p2 <= std_logic_vector(unsigned(ap_const_lv10_100) + unsigned(tmp_93_i_cast_fu_324_p1));
    tmp_110_fu_396_p2 <= std_logic_vector(unsigned(tmp_309_fu_352_p1) + unsigned(tmp_310_fu_356_p1));
    tmp_111_fu_376_p3 <= (ap_const_lv55_1 & c_V_reg_705);
    tmp_112_fu_338_p2 <= std_logic_vector(unsigned(ap_const_lv11_300) + unsigned(tmp_97_i_cast_fu_334_p1));
    tmp_113_fu_428_p2 <= (tmp_317_fu_414_p1 xor tmp_110_reg_745);
    tmp_114_fu_437_p2 <= (tmp_316_fu_410_p1 xor tmp_108_reg_740);
    tmp_115_fu_446_p2 <= (tmp_315_fu_406_p1 xor tmp_106_reg_735);
    tmp_116_fu_457_p2 <= std_logic_vector(unsigned(tmp_320_fu_442_p1) + unsigned(tmp_115_fu_446_p2));
    tmp_117_fu_463_p2 <= std_logic_vector(unsigned(tmp_319_fu_433_p1) + unsigned(tmp_114_fu_437_p2));
    tmp_118_fu_469_p2 <= std_logic_vector(unsigned(tmp_318_fu_424_p1) + unsigned(tmp_113_fu_428_p2));
    tmp_119_fu_509_p2 <= (key_g_P_V_q1 xor agg_result_V_i_reg_755);
    tmp_121_fu_587_p2 <= std_logic_vector(unsigned(ap_const_lv10_100) + unsigned(tmp_93_i9_cast_fu_583_p1));
    tmp_122_fu_611_p3 <= (ap_const_lv55_1 & c_V_3_reg_790);
    tmp_123_fu_597_p2 <= std_logic_vector(unsigned(ap_const_lv11_300) + unsigned(tmp_97_i1_cast_fu_593_p1));
    tmp_14_fu_475_p2 <= (tmp_324_reg_675 or ap_const_lv4_1);
    tmp_15_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_475_p2),64));
    tmp_16_fu_635_p2 <= (op_V_read_assign_reg_695 xor agg_result_V_i1_reg_825);
    tmp_17_fu_639_p2 <= (right_V_reg_192 xor key_g_P_V_q1);
    tmp_191_cast_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_109_reg_710),64));
    tmp_193_cast_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_112_reg_715),64));
    tmp_195_cast_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_121_reg_795),64));
    tmp_197_cast_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_123_reg_800),64));
    tmp_302_fu_252_p1 <= key_g_P_V_q0(9 - 1 downto 0);
    tmp_303_fu_256_p1 <= left_V_reg_182(9 - 1 downto 0);
    tmp_304_fu_260_p1 <= key_g_P_V_q0(25 - 1 downto 0);
    tmp_305_fu_264_p1 <= left_V_reg_182(25 - 1 downto 0);
    tmp_306_fu_268_p1 <= key_g_P_V_q0(17 - 1 downto 0);
    tmp_307_fu_272_p1 <= left_V_reg_182(17 - 1 downto 0);
    tmp_308_fu_314_p4 <= p_04_cast_fu_282_p2(24 downto 16);
    tmp_309_fu_352_p1 <= key_g_S_V_q1(9 - 1 downto 0);
    tmp_310_fu_356_p1 <= key_g_S_V_q0(9 - 1 downto 0);
    tmp_311_fu_360_p1 <= key_g_S_V_q1(25 - 1 downto 0);
    tmp_312_fu_364_p1 <= key_g_S_V_q0(25 - 1 downto 0);
    tmp_313_fu_368_p1 <= key_g_S_V_q1(17 - 1 downto 0);
    tmp_314_fu_372_p1 <= key_g_S_V_q0(17 - 1 downto 0);
    tmp_315_fu_406_p1 <= key_g_S_V_q0(17 - 1 downto 0);
    tmp_316_fu_410_p1 <= key_g_S_V_q0(25 - 1 downto 0);
    tmp_317_fu_414_p1 <= key_g_S_V_q0(9 - 1 downto 0);
    tmp_318_fu_424_p1 <= key_g_S_V_q1(9 - 1 downto 0);
    tmp_319_fu_433_p1 <= key_g_S_V_q1(25 - 1 downto 0);
    tmp_320_fu_442_p1 <= key_g_S_V_q1(17 - 1 downto 0);
    tmp_321_fu_485_p1 <= right_V_reg_192(17 - 1 downto 0);
    tmp_322_fu_489_p1 <= right_V_reg_192(25 - 1 downto 0);
    tmp_323_fu_493_p1 <= right_V_reg_192(9 - 1 downto 0);
    tmp_324_fu_242_p1 <= i_reg_202(4 - 1 downto 0);
    tmp_325_fu_497_p1 <= key_g_P_V_q1(9 - 1 downto 0);
    tmp_326_fu_501_p1 <= key_g_P_V_q1(25 - 1 downto 0);
    tmp_327_fu_505_p1 <= key_g_P_V_q1(17 - 1 downto 0);
    tmp_328_fu_573_p4 <= p_02_cast_fu_536_p2(24 downto 16);
    tmp_92_i8_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_120_reg_785),64));
    tmp_92_i_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_107_reg_700),64));
    tmp_93_i9_cast_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_328_fu_573_p4),10));
    tmp_93_i_cast_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_308_fu_314_p4),10));
    tmp_96_i1_fu_623_p2 <= (reg_225 xor key_g_S_V_q0);
    tmp_96_i_fu_418_p2 <= (reg_225 xor key_g_S_V_q0);
    tmp_97_i1_cast_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_V_3_fu_567_p2),11));
    tmp_97_i_cast_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_V_fu_308_p2),11));
    tmp_fu_229_p3 <= i_reg_202(4 downto 4);
    tmp_s_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_202),64));
end behav;
