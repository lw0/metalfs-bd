-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity op_mem_read_impl_Blo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (63 downto 0);
    read_mem_config_size_load_loc_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    read_mem_config_size_load_loc_empty_n : IN STD_LOGIC;
    read_mem_config_size_load_loc_read : OUT STD_LOGIC;
    tmp_33_cast25_loc_out_din : OUT STD_LOGIC_VECTOR (2 downto 0);
    tmp_33_cast25_loc_out_full_n : IN STD_LOGIC;
    tmp_33_cast25_loc_out_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of op_mem_read_impl_Blo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal read_mem_config_size_load_loc_blk_n : STD_LOGIC;
    signal tmp_33_cast25_loc_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_73_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_147 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal begin_line_offset_fu_77_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_35_i_i_fu_81_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal end_line_offset_fu_90_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_39_cast_i_i_fu_107_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_40_i_i_fu_111_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_41_i_i_fu_117_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_i_i_fu_101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_i_i_fu_121_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal first_line_strb_fu_95_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal last_line_strb_fu_127_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((tmp_33_cast25_loc_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv64_0;
            else
                if (((tmp_33_cast25_loc_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_0_preg <= first_line_strb_fu_95_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv64_0;
            else
                if (((tmp_33_cast25_loc_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_1_preg <= last_line_strb_fu_127_p3;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (read_mem_config_size_load_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_reg_147 <= tmp_fu_73_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, read_mem_config_size_load_loc_empty_n, tmp_33_cast25_loc_out_full_n, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (read_mem_config_size_load_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_33_cast25_loc_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, read_mem_config_size_load_loc_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (read_mem_config_size_load_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, tmp_33_cast25_loc_out_full_n, ap_CS_fsm_state2)
    begin
        if (((tmp_33_cast25_loc_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_return_0_assign_proc : process(tmp_33_cast25_loc_out_full_n, ap_CS_fsm_state2, first_line_strb_fu_95_p2, ap_return_0_preg)
    begin
        if (((tmp_33_cast25_loc_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return_0 <= first_line_strb_fu_95_p2;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(tmp_33_cast25_loc_out_full_n, ap_CS_fsm_state2, last_line_strb_fu_127_p3, ap_return_1_preg)
    begin
        if (((tmp_33_cast25_loc_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return_1 <= last_line_strb_fu_127_p3;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    begin_line_offset_fu_77_p1 <= p_read(6 - 1 downto 0);
    end_line_offset_fu_90_p2 <= std_logic_vector(unsigned(tmp_reg_147) + unsigned(begin_line_offset_fu_77_p1));
    first_line_strb_fu_95_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_35_i_i_fu_81_p1(31-1 downto 0)))));

    internal_ap_ready_assign_proc : process(tmp_33_cast25_loc_out_full_n, ap_CS_fsm_state2)
    begin
        if (((tmp_33_cast25_loc_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    last_line_strb_fu_127_p3 <= 
        ap_const_lv64_FFFFFFFFFFFFFFFF when (tmp_36_i_i_fu_101_p2(0) = '1') else 
        tmp_42_i_i_fu_121_p2;

    read_mem_config_size_load_loc_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, read_mem_config_size_load_loc_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            read_mem_config_size_load_loc_blk_n <= read_mem_config_size_load_loc_empty_n;
        else 
            read_mem_config_size_load_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    read_mem_config_size_load_loc_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, read_mem_config_size_load_loc_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (read_mem_config_size_load_loc_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            read_mem_config_size_load_loc_read <= ap_const_logic_1;
        else 
            read_mem_config_size_load_loc_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    tmp_33_cast25_loc_out_blk_n_assign_proc : process(tmp_33_cast25_loc_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            tmp_33_cast25_loc_out_blk_n <= tmp_33_cast25_loc_out_full_n;
        else 
            tmp_33_cast25_loc_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tmp_33_cast25_loc_out_din <= p_read(3 - 1 downto 0);

    tmp_33_cast25_loc_out_write_assign_proc : process(tmp_33_cast25_loc_out_full_n, ap_CS_fsm_state2)
    begin
        if (((tmp_33_cast25_loc_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            tmp_33_cast25_loc_out_write <= ap_const_logic_1;
        else 
            tmp_33_cast25_loc_out_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_35_i_i_fu_81_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(begin_line_offset_fu_77_p1),64));
    tmp_36_i_i_fu_101_p2 <= "1" when (end_line_offset_fu_90_p2 = ap_const_lv6_0) else "0";
    tmp_39_cast_i_i_fu_107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end_line_offset_fu_90_p2),7));
    tmp_40_i_i_fu_111_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(tmp_39_cast_i_i_fu_107_p1));
    tmp_41_i_i_fu_117_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_i_i_fu_111_p2),64));
    tmp_42_i_i_fu_121_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_41_i_i_fu_117_p1(31-1 downto 0)))));
    tmp_fu_73_p1 <= read_mem_config_size_load_loc_dout(6 - 1 downto 0);
end behav;
