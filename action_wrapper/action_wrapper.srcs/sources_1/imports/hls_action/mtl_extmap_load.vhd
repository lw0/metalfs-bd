-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mtl_extmap_load is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    map_extents_begin_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    map_extents_begin_V_ce0 : OUT STD_LOGIC;
    map_extents_begin_V_we0 : OUT STD_LOGIC;
    map_extents_begin_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    map_extents_begin_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    map_extents_count_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    map_extents_count_V_ce0 : OUT STD_LOGIC;
    map_extents_count_V_we0 : OUT STD_LOGIC;
    map_extents_count_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    map_extents_nextlblo_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    map_extents_nextlblo_ce0 : OUT STD_LOGIC;
    map_extents_nextlblo_we0 : OUT STD_LOGIC;
    map_extents_nextlblo_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    map_extent_count_V_w : IN STD_LOGIC_VECTOR (9 downto 0);
    extent_address_V : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_V_AWVALID : OUT STD_LOGIC;
    m_axi_mem_V_AWREADY : IN STD_LOGIC;
    m_axi_mem_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_WVALID : OUT STD_LOGIC;
    m_axi_mem_V_WREADY : IN STD_LOGIC;
    m_axi_mem_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_mem_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_V_WLAST : OUT STD_LOGIC;
    m_axi_mem_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_ARVALID : OUT STD_LOGIC;
    m_axi_mem_V_ARREADY : IN STD_LOGIC;
    m_axi_mem_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_RVALID : IN STD_LOGIC;
    m_axi_mem_V_RREADY : OUT STD_LOGIC;
    m_axi_mem_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_mem_V_RLAST : IN STD_LOGIC;
    m_axi_mem_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_V_BVALID : IN STD_LOGIC;
    m_axi_mem_V_BREADY : OUT STD_LOGIC;
    m_axi_mem_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mem_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of mtl_extmap_load is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_40 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_3F : STD_LOGIC_VECTOR (8 downto 0) := "000111111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv512_lc_3 : STD_LOGIC_VECTOR (511 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mem_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal mem_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_extent_V_fu_240_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_extent_V_reg_787 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal o_line_extent_V_fu_246_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal o_line_extent_V_reg_792 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_798 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_fu_276_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal sum_reg_802 : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_sig_ioackin_m_axi_mem_V_ARREADY : STD_LOGIC;
    signal line_V_reg_818 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_248_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_248_reg_823 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_249_fu_333_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_249_reg_829 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_258_fu_361_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_258_reg_835 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_265_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_265_reg_840 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_266_fu_393_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_266_reg_846 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_275_fu_421_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_275_reg_852 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_reg_857 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal p_Result_7_i_reg_862 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_264_fu_503_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_264_reg_867 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_reg_872 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_reg_877 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_54_reg_882 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_reg_887 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_reg_892 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_reg_897 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_7_i1_reg_902 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_281_fu_630_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_281_reg_907 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_reg_912 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_59_reg_917 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_reg_922 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_61_reg_927 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_62_reg_932 : STD_LOGIC_VECTOR (7 downto 0);
    signal last_block_V_fu_730_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal last_block_V_reg_937 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_1_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_943 : STD_LOGIC_VECTOR (63 downto 0);
    signal map_block_count_V_wr_reg_201 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal p_4_reg_213 : STD_LOGIC_VECTOR (9 downto 0);
    signal sum_cast_fu_293_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_mem_V_ARREADY : STD_LOGIC := '0';
    signal line_address_V_1_fu_118 : STD_LOGIC_VECTOR (63 downto 0);
    signal line_address_V_fu_282_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_122 : STD_LOGIC_VECTOR (511 downto 0);
    signal count_V_fu_723_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_247_fu_259_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal mem_V_offset_cast_fu_273_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal r_V_12_cast_fu_269_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal r_V_12_fu_314_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal Hi_assign_fu_321_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_250_fu_337_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_252_fu_341_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_254_fu_347_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_255_fu_353_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal op_V_read_assign_fu_307_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal op_V_read_assign_3_fu_367_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_fu_373_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal Hi_assign_8_fu_381_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_267_fu_397_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_269_fu_401_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_271_fu_407_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_272_fu_413_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_251_fu_430_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_253_fu_440_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_257_fu_452_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_256_fu_445_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_259_fu_458_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_260_fu_462_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_261_fu_465_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_262_fu_471_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_s_fu_477_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_268_fu_557_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_270_fu_567_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_274_fu_579_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_273_fu_572_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_276_fu_585_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_277_fu_589_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_278_fu_592_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_279_fu_598_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_38_fu_604_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_37_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_i_fu_687_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_39_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_57_i1_fu_710_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_return_0_preg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_mem_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_mem_V_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    if ((ap_sig_ioackin_m_axi_mem_V_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_mem_V_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_mem_V_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_mem_V_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv10_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_return_0_preg <= map_extent_count_V_w;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_return_1_preg <= map_block_count_V_wr_reg_201;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_return_2_preg <= map_extents_begin_V_q0;
                end if; 
            end if;
        end if;
    end process;


    line_address_V_1_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_250_p2 = ap_const_lv1_1) and (exitcond_fu_235_p2 = ap_const_lv1_0))) then 
                line_address_V_1_fu_118 <= line_address_V_fu_282_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                line_address_V_1_fu_118 <= extent_address_V;
            end if; 
        end if;
    end process;

    map_block_count_V_wr_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                map_block_count_V_wr_reg_201 <= last_block_V_reg_937;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                map_block_count_V_wr_reg_201 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    p_4_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                p_4_reg_213 <= i_extent_V_reg_787;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_4_reg_213 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_reg_798 = ap_const_lv1_1))) then 
                p_Val2_s_fu_122 <= line_V_reg_818;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_fu_122 <= ap_const_lv512_lc_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_extent_V_reg_787 <= i_extent_V_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                last_block_V_reg_937 <= last_block_V_fu_730_p2;
                    tmp_1_reg_943(9 downto 0) <= tmp_1_fu_736_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_mem_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                line_V_reg_818 <= m_axi_mem_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_235_p2 = ap_const_lv1_0))) then
                o_line_extent_V_reg_792 <= o_line_extent_V_fu_246_p1;
                tmp_reg_798 <= tmp_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                p_Result_7_i1_reg_902 <= p_Result_38_fu_604_p2(63 downto 56);
                p_Result_7_i_reg_862 <= p_Result_s_fu_477_p2(63 downto 56);
                tmp_264_reg_867 <= tmp_264_fu_503_p1;
                tmp_281_reg_907 <= tmp_281_fu_630_p1;
                tmp_52_reg_872 <= p_Result_s_fu_477_p2(15 downto 8);
                tmp_53_reg_877 <= p_Result_s_fu_477_p2(23 downto 16);
                tmp_54_reg_882 <= p_Result_s_fu_477_p2(31 downto 24);
                tmp_55_reg_887 <= p_Result_s_fu_477_p2(39 downto 32);
                tmp_56_reg_892 <= p_Result_s_fu_477_p2(47 downto 40);
                tmp_57_reg_897 <= p_Result_38_fu_604_p2(55 downto 48);
                tmp_58_reg_912 <= p_Result_38_fu_604_p2(15 downto 8);
                tmp_59_reg_917 <= p_Result_38_fu_604_p2(23 downto 16);
                tmp_60_reg_922 <= p_Result_38_fu_604_p2(31 downto 24);
                tmp_61_reg_927 <= p_Result_38_fu_604_p2(39 downto 32);
                tmp_62_reg_932 <= p_Result_38_fu_604_p2(47 downto 40);
                tmp_s_reg_857 <= p_Result_s_fu_477_p2(55 downto 48);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_250_p2 = ap_const_lv1_1) and (exitcond_fu_235_p2 = ap_const_lv1_0))) then
                sum_reg_802 <= sum_fu_276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_248_reg_823 <= tmp_248_fu_327_p2;
                    tmp_249_reg_829(8 downto 7) <= tmp_249_fu_333_p1(8 downto 7);
                    tmp_258_reg_835(9 downto 1) <= tmp_258_fu_361_p2(9 downto 1);
                tmp_265_reg_840 <= tmp_265_fu_387_p2;
                    tmp_266_reg_846(8 downto 7) <= tmp_266_fu_393_p1(8 downto 7);
                    tmp_275_reg_852(9 downto 1) <= tmp_275_fu_421_p2(9 downto 1);
            end if;
        end if;
    end process;
    tmp_249_reg_829(6 downto 0) <= "0000000";
    tmp_249_reg_829(9) <= '0';
    tmp_258_reg_835(0) <= '0';
    tmp_266_reg_846(6 downto 0) <= "1000000";
    tmp_266_reg_846(9) <= '0';
    tmp_275_reg_852(0) <= '0';
    tmp_1_reg_943(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_mem_V_RVALID, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state2, exitcond_fu_235_p2, tmp_fu_250_p2, ap_sig_ioackin_m_axi_mem_V_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_250_p2 = ap_const_lv1_0) and (exitcond_fu_235_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_250_p2 = ap_const_lv1_1) and (exitcond_fu_235_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_m_axi_mem_V_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((m_axi_mem_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    Hi_assign_8_fu_381_p2 <= (r_V_fu_373_p3 or ap_const_lv9_3F);
    Hi_assign_fu_321_p2 <= (r_V_12_fu_314_p3 or ap_const_lv9_3F);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(map_extent_count_V_w, ap_CS_fsm_state15, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_return_0 <= map_extent_count_V_w;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(map_block_count_V_wr_reg_201, ap_CS_fsm_state15, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_return_1 <= map_block_count_V_wr_reg_201;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(map_extents_begin_V_q0, ap_CS_fsm_state15, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_return_2 <= map_extents_begin_V_q0;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_mem_V_ARREADY_assign_proc : process(m_axi_mem_V_ARREADY, ap_reg_ioackin_m_axi_mem_V_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_mem_V_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_mem_V_ARREADY <= m_axi_mem_V_ARREADY;
        else 
            ap_sig_ioackin_m_axi_mem_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    count_V_fu_723_p2 <= std_logic_vector(unsigned(p_Result_39_fu_707_p1) + unsigned(tmp_57_i1_fu_710_p9));
    exitcond_fu_235_p2 <= "1" when (p_4_reg_213 = map_extent_count_V_w) else "0";
    i_extent_V_fu_240_p2 <= std_logic_vector(unsigned(p_4_reg_213) + unsigned(ap_const_lv10_1));
    last_block_V_fu_730_p2 <= std_logic_vector(unsigned(map_block_count_V_wr_reg_201) + unsigned(count_V_fu_723_p2));
    line_address_V_fu_282_p2 <= std_logic_vector(unsigned(line_address_V_1_fu_118) + unsigned(ap_const_lv64_40));
    m_axi_mem_V_ARADDR <= sum_cast_fu_293_p1;
    m_axi_mem_V_ARBURST <= ap_const_lv2_0;
    m_axi_mem_V_ARCACHE <= ap_const_lv4_0;
    m_axi_mem_V_ARID <= ap_const_lv1_0;
    m_axi_mem_V_ARLEN <= ap_const_lv32_1;
    m_axi_mem_V_ARLOCK <= ap_const_lv2_0;
    m_axi_mem_V_ARPROT <= ap_const_lv3_0;
    m_axi_mem_V_ARQOS <= ap_const_lv4_0;
    m_axi_mem_V_ARREGION <= ap_const_lv4_0;
    m_axi_mem_V_ARSIZE <= ap_const_lv3_0;
    m_axi_mem_V_ARUSER <= ap_const_lv1_0;

    m_axi_mem_V_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_reg_ioackin_m_axi_mem_V_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_mem_V_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_mem_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_mem_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_V_AWADDR <= ap_const_lv64_0;
    m_axi_mem_V_AWBURST <= ap_const_lv2_0;
    m_axi_mem_V_AWCACHE <= ap_const_lv4_0;
    m_axi_mem_V_AWID <= ap_const_lv1_0;
    m_axi_mem_V_AWLEN <= ap_const_lv32_0;
    m_axi_mem_V_AWLOCK <= ap_const_lv2_0;
    m_axi_mem_V_AWPROT <= ap_const_lv3_0;
    m_axi_mem_V_AWQOS <= ap_const_lv4_0;
    m_axi_mem_V_AWREGION <= ap_const_lv4_0;
    m_axi_mem_V_AWSIZE <= ap_const_lv3_0;
    m_axi_mem_V_AWUSER <= ap_const_lv1_0;
    m_axi_mem_V_AWVALID <= ap_const_logic_0;
    m_axi_mem_V_BREADY <= ap_const_logic_0;

    m_axi_mem_V_RREADY_assign_proc : process(m_axi_mem_V_RVALID, ap_CS_fsm_state10)
    begin
        if (((m_axi_mem_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_mem_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_mem_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_mem_V_WID <= ap_const_lv1_0;
    m_axi_mem_V_WLAST <= ap_const_logic_0;
    m_axi_mem_V_WSTRB <= ap_const_lv64_0;
    m_axi_mem_V_WUSER <= ap_const_lv1_0;
    m_axi_mem_V_WVALID <= ap_const_logic_0;

    map_extents_begin_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state13, tmp_1_fu_736_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            map_extents_begin_V_address0 <= tmp_1_fu_736_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            map_extents_begin_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        else 
            map_extents_begin_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    map_extents_begin_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            map_extents_begin_V_ce0 <= ap_const_logic_1;
        else 
            map_extents_begin_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    map_extents_begin_V_d0 <= std_logic_vector(unsigned(p_Result_37_fu_684_p1) + unsigned(tmp_57_i_fu_687_p9));

    map_extents_begin_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            map_extents_begin_V_we0 <= ap_const_logic_1;
        else 
            map_extents_begin_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    map_extents_count_V_address0 <= tmp_1_fu_736_p1(9 - 1 downto 0);

    map_extents_count_V_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            map_extents_count_V_ce0 <= ap_const_logic_1;
        else 
            map_extents_count_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    map_extents_count_V_d0 <= count_V_fu_723_p2;

    map_extents_count_V_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            map_extents_count_V_we0 <= ap_const_logic_1;
        else 
            map_extents_count_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    map_extents_nextlblo_address0 <= tmp_1_reg_943(9 - 1 downto 0);

    map_extents_nextlblo_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            map_extents_nextlblo_ce0 <= ap_const_logic_1;
        else 
            map_extents_nextlblo_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    map_extents_nextlblo_d0 <= last_block_V_reg_937;

    map_extents_nextlblo_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            map_extents_nextlblo_we0 <= ap_const_logic_1;
        else 
            map_extents_nextlblo_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_V_blk_n_AR_assign_proc : process(m_axi_mem_V_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            mem_V_blk_n_AR <= m_axi_mem_V_ARREADY;
        else 
            mem_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_V_blk_n_R_assign_proc : process(m_axi_mem_V_RVALID, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            mem_V_blk_n_R <= m_axi_mem_V_RVALID;
        else 
            mem_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    mem_V_offset_cast_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_V_offset),59));
    o_line_extent_V_fu_246_p1 <= p_4_reg_213(2 - 1 downto 0);
    op_V_read_assign_3_fu_367_p2 <= (op_V_read_assign_fu_307_p3 or ap_const_lv6_8);
    op_V_read_assign_fu_307_p3 <= (o_line_extent_V_reg_792 & ap_const_lv4_0);
    p_Result_37_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_7_i_reg_862),64));
    p_Result_38_fu_604_p2 <= (tmp_279_fu_598_p2 and tmp_278_fu_592_p2);
    p_Result_39_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_7_i1_reg_902),64));
    p_Result_s_fu_477_p2 <= (tmp_262_fu_471_p2 and tmp_261_fu_465_p2);
    r_V_12_cast_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_247_fu_259_p4),59));
    r_V_12_fu_314_p3 <= (o_line_extent_V_reg_792 & ap_const_lv7_0);
    r_V_fu_373_p3 <= (op_V_read_assign_3_fu_367_p2 & ap_const_lv3_0);
    sum_cast_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_reg_802),64));
    sum_fu_276_p2 <= std_logic_vector(unsigned(mem_V_offset_cast_fu_273_p1) + unsigned(r_V_12_cast_fu_269_p1));
    tmp_1_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_4_reg_213),64));
    tmp_247_fu_259_p4 <= line_address_V_1_fu_118(63 downto 6);
    tmp_248_fu_327_p2 <= "1" when (unsigned(r_V_12_fu_314_p3) > unsigned(Hi_assign_fu_321_p2)) else "0";
    tmp_249_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_12_fu_314_p3),10));
    tmp_250_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hi_assign_fu_321_p2),10));
    
    tmp_251_fu_430_p4_proc : process(p_Val2_s_fu_122)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_251_fu_430_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_122;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_251_fu_430_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_251_fu_430_p4_i) := p_Val2_s_fu_122(512-1-tmp_251_fu_430_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_251_fu_430_p4 <= resvalue(512-1 downto 0);
    end process;

    tmp_252_fu_341_p2 <= std_logic_vector(unsigned(tmp_249_fu_333_p1) - unsigned(tmp_250_fu_337_p1));
    tmp_253_fu_440_p2 <= (tmp_249_reg_829 xor ap_const_lv10_1FF);
    tmp_254_fu_347_p2 <= std_logic_vector(unsigned(tmp_250_fu_337_p1) - unsigned(tmp_249_fu_333_p1));
    tmp_255_fu_353_p3 <= 
        tmp_252_fu_341_p2 when (tmp_248_fu_327_p2(0) = '1') else 
        tmp_254_fu_347_p2;
    tmp_256_fu_445_p3 <= 
        tmp_251_fu_430_p4 when (tmp_248_reg_823(0) = '1') else 
        p_Val2_s_fu_122;
    tmp_257_fu_452_p3 <= 
        tmp_253_fu_440_p2 when (tmp_248_reg_823(0) = '1') else 
        tmp_249_reg_829;
    tmp_258_fu_361_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(tmp_255_fu_353_p3));
    tmp_259_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_257_fu_452_p3),512));
    tmp_260_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_258_reg_835),512));
    tmp_261_fu_465_p2 <= std_logic_vector(shift_right(unsigned(tmp_256_fu_445_p3),to_integer(unsigned('0' & tmp_259_fu_458_p1(31-1 downto 0)))));
    tmp_262_fu_471_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_3),to_integer(unsigned('0' & tmp_260_fu_462_p1(31-1 downto 0)))));
    tmp_264_fu_503_p1 <= p_Result_s_fu_477_p2(8 - 1 downto 0);
    tmp_265_fu_387_p2 <= "1" when (unsigned(r_V_fu_373_p3) > unsigned(Hi_assign_8_fu_381_p2)) else "0";
    tmp_266_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_373_p3),10));
    tmp_267_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hi_assign_8_fu_381_p2),10));
    
    tmp_268_fu_557_p4_proc : process(p_Val2_s_fu_122)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_268_fu_557_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_122;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_268_fu_557_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_268_fu_557_p4_i) := p_Val2_s_fu_122(512-1-tmp_268_fu_557_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_268_fu_557_p4 <= resvalue(512-1 downto 0);
    end process;

    tmp_269_fu_401_p2 <= std_logic_vector(unsigned(tmp_266_fu_393_p1) - unsigned(tmp_267_fu_397_p1));
    tmp_270_fu_567_p2 <= (tmp_266_reg_846 xor ap_const_lv10_1FF);
    tmp_271_fu_407_p2 <= std_logic_vector(unsigned(tmp_267_fu_397_p1) - unsigned(tmp_266_fu_393_p1));
    tmp_272_fu_413_p3 <= 
        tmp_269_fu_401_p2 when (tmp_265_fu_387_p2(0) = '1') else 
        tmp_271_fu_407_p2;
    tmp_273_fu_572_p3 <= 
        tmp_268_fu_557_p4 when (tmp_265_reg_840(0) = '1') else 
        p_Val2_s_fu_122;
    tmp_274_fu_579_p3 <= 
        tmp_270_fu_567_p2 when (tmp_265_reg_840(0) = '1') else 
        tmp_266_reg_846;
    tmp_275_fu_421_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(tmp_272_fu_413_p3));
    tmp_276_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_274_fu_579_p3),512));
    tmp_277_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_275_reg_852),512));
    tmp_278_fu_592_p2 <= std_logic_vector(shift_right(unsigned(tmp_273_fu_572_p3),to_integer(unsigned('0' & tmp_276_fu_585_p1(31-1 downto 0)))));
    tmp_279_fu_598_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_3),to_integer(unsigned('0' & tmp_277_fu_589_p1(31-1 downto 0)))));
    tmp_281_fu_630_p1 <= p_Result_38_fu_604_p2(8 - 1 downto 0);
    tmp_57_i1_fu_710_p9 <= (((((((tmp_281_reg_907 & tmp_58_reg_912) & tmp_59_reg_917) & tmp_60_reg_922) & tmp_61_reg_927) & tmp_62_reg_932) & tmp_57_reg_897) & ap_const_lv8_0);
    tmp_57_i_fu_687_p9 <= (((((((tmp_264_reg_867 & tmp_52_reg_872) & tmp_53_reg_877) & tmp_54_reg_882) & tmp_55_reg_887) & tmp_56_reg_892) & tmp_s_reg_857) & ap_const_lv8_0);
    tmp_fu_250_p2 <= "1" when (o_line_extent_V_fu_246_p1 = ap_const_lv2_0) else "0";
end behav;
