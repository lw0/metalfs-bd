-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity op_mem_write_impl_Bl is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    write_mem_config_offset_load_out_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    write_mem_config_offset_load_out_out_full_n : IN STD_LOGIC;
    write_mem_config_offset_load_out_out_write : OUT STD_LOGIC;
    write_mem_config_offset_load_cast21_out_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
    write_mem_config_offset_load_cast21_out_out_full_n : IN STD_LOGIC;
    write_mem_config_offset_load_cast21_out_out_write : OUT STD_LOGIC;
    write_mem_config_offset_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    write_mem_config_offset_out_full_n : IN STD_LOGIC;
    write_mem_config_offset_out_write : OUT STD_LOGIC;
    dout_gmem_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
    dout_gmem_V_offset_out_din : OUT STD_LOGIC_VECTOR (57 downto 0);
    dout_gmem_V_offset_out_full_n : IN STD_LOGIC;
    dout_gmem_V_offset_out_write : OUT STD_LOGIC;
    write_mem_config_off : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of op_mem_write_impl_Bl is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal write_mem_config_offset_load_out_out_blk_n : STD_LOGIC;
    signal write_mem_config_offset_load_cast21_out_out_blk_n : STD_LOGIC;
    signal write_mem_config_offset_out_blk_n : STD_LOGIC;
    signal dout_gmem_V_offset_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal begin_line_offset_fu_135_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal insert_padding_eleme_fu_152_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal op2_assign_i_i_i_i_fu_166_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_cast19_i_i_i_i_fu_139_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal op2_assign_3_i_i_i_i_fu_178_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal op2_assign_2_i_i_i_i_fu_188_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_cast20_out_i_i_fu_143_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal insert_padding_eleme_6_fu_162_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_out_i_i_fu_174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal op2_assign_3_cast18_s_fu_184_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_out_i_i_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (dout_gmem_V_offset_out_full_n = ap_const_logic_0) or (write_mem_config_offset_out_full_n = ap_const_logic_0) or (write_mem_config_offset_load_cast21_out_out_full_n = ap_const_logic_0) or (write_mem_config_offset_load_out_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, write_mem_config_offset_load_out_out_full_n, write_mem_config_offset_load_cast21_out_out_full_n, write_mem_config_offset_out_full_n, dout_gmem_V_offset_out_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, write_mem_config_offset_load_out_out_full_n, write_mem_config_offset_load_cast21_out_out_full_n, write_mem_config_offset_out_full_n, dout_gmem_V_offset_out_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (dout_gmem_V_offset_out_full_n = ap_const_logic_0) or (write_mem_config_offset_out_full_n = ap_const_logic_0) or (write_mem_config_offset_load_cast21_out_out_full_n = ap_const_logic_0) or (write_mem_config_offset_load_out_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, write_mem_config_offset_load_out_out_full_n, write_mem_config_offset_load_cast21_out_out_full_n, write_mem_config_offset_out_full_n, dout_gmem_V_offset_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (dout_gmem_V_offset_out_full_n = ap_const_logic_0) or (write_mem_config_offset_out_full_n = ap_const_logic_0) or (write_mem_config_offset_load_cast21_out_out_full_n = ap_const_logic_0) or (write_mem_config_offset_load_out_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    ap_return_0 <= tmp_2_cast20_out_i_i_fu_143_p1;
    ap_return_1 <= insert_padding_eleme_6_fu_162_p1;
    ap_return_2 <= tmp_3_out_i_i_fu_174_p1;
    ap_return_3 <= op2_assign_3_cast18_s_fu_184_p1;
    ap_return_4 <= tmp_4_out_i_i_fu_196_p1;
    begin_line_offset_fu_135_p1 <= write_mem_config_off(3 - 1 downto 0);

    dout_gmem_V_offset_out_blk_n_assign_proc : process(ap_CS_fsm_state1, dout_gmem_V_offset_out_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            dout_gmem_V_offset_out_blk_n <= dout_gmem_V_offset_out_full_n;
        else 
            dout_gmem_V_offset_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_gmem_V_offset_out_din <= dout_gmem_V_offset;

    dout_gmem_V_offset_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, write_mem_config_offset_load_out_out_full_n, write_mem_config_offset_load_cast21_out_out_full_n, write_mem_config_offset_out_full_n, dout_gmem_V_offset_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (dout_gmem_V_offset_out_full_n = ap_const_logic_0) or (write_mem_config_offset_out_full_n = ap_const_logic_0) or (write_mem_config_offset_load_cast21_out_out_full_n = ap_const_logic_0) or (write_mem_config_offset_load_out_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dout_gmem_V_offset_out_write <= ap_const_logic_1;
        else 
            dout_gmem_V_offset_out_write <= ap_const_logic_0;
        end if; 
    end process;

    insert_padding_eleme_6_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(insert_padding_eleme_fu_152_p4),8));
    insert_padding_eleme_fu_152_p4 <= write_mem_config_off(5 downto 3);

    internal_ap_ready_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, write_mem_config_offset_load_out_out_full_n, write_mem_config_offset_load_cast21_out_out_full_n, write_mem_config_offset_out_full_n, dout_gmem_V_offset_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (dout_gmem_V_offset_out_full_n = ap_const_logic_0) or (write_mem_config_offset_out_full_n = ap_const_logic_0) or (write_mem_config_offset_load_cast21_out_out_full_n = ap_const_logic_0) or (write_mem_config_offset_load_out_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    op2_assign_2_i_i_i_i_fu_188_p3 <= (op2_assign_3_i_i_i_i_fu_178_p2 & ap_const_lv3_0);
    op2_assign_3_cast18_s_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_3_i_i_i_i_fu_178_p2),8));
    op2_assign_3_i_i_i_i_fu_178_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(tmp_2_cast19_i_i_i_i_fu_139_p1));
    op2_assign_i_i_i_i_fu_166_p3 <= (begin_line_offset_fu_135_p1 & ap_const_lv3_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_cast19_i_i_i_i_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(begin_line_offset_fu_135_p1),7));
    tmp_2_cast20_out_i_i_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(begin_line_offset_fu_135_p1),8));
    tmp_3_out_i_i_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_i_i_i_i_fu_166_p3),64));
    tmp_4_out_i_i_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_2_i_i_i_i_fu_188_p3),64));

    write_mem_config_offset_load_cast21_out_out_blk_n_assign_proc : process(ap_CS_fsm_state1, write_mem_config_offset_load_cast21_out_out_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            write_mem_config_offset_load_cast21_out_out_blk_n <= write_mem_config_offset_load_cast21_out_out_full_n;
        else 
            write_mem_config_offset_load_cast21_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    write_mem_config_offset_load_cast21_out_out_din <= write_mem_config_off(12 - 1 downto 0);

    write_mem_config_offset_load_cast21_out_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, write_mem_config_offset_load_out_out_full_n, write_mem_config_offset_load_cast21_out_out_full_n, write_mem_config_offset_out_full_n, dout_gmem_V_offset_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (dout_gmem_V_offset_out_full_n = ap_const_logic_0) or (write_mem_config_offset_out_full_n = ap_const_logic_0) or (write_mem_config_offset_load_cast21_out_out_full_n = ap_const_logic_0) or (write_mem_config_offset_load_out_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            write_mem_config_offset_load_cast21_out_out_write <= ap_const_logic_1;
        else 
            write_mem_config_offset_load_cast21_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    write_mem_config_offset_load_out_out_blk_n_assign_proc : process(ap_CS_fsm_state1, write_mem_config_offset_load_out_out_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            write_mem_config_offset_load_out_out_blk_n <= write_mem_config_offset_load_out_out_full_n;
        else 
            write_mem_config_offset_load_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    write_mem_config_offset_load_out_out_din <= write_mem_config_off;

    write_mem_config_offset_load_out_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, write_mem_config_offset_load_out_out_full_n, write_mem_config_offset_load_cast21_out_out_full_n, write_mem_config_offset_out_full_n, dout_gmem_V_offset_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (dout_gmem_V_offset_out_full_n = ap_const_logic_0) or (write_mem_config_offset_out_full_n = ap_const_logic_0) or (write_mem_config_offset_load_cast21_out_out_full_n = ap_const_logic_0) or (write_mem_config_offset_load_out_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            write_mem_config_offset_load_out_out_write <= ap_const_logic_1;
        else 
            write_mem_config_offset_load_out_out_write <= ap_const_logic_0;
        end if; 
    end process;


    write_mem_config_offset_out_blk_n_assign_proc : process(ap_CS_fsm_state1, write_mem_config_offset_out_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            write_mem_config_offset_out_blk_n <= write_mem_config_offset_out_full_n;
        else 
            write_mem_config_offset_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    write_mem_config_offset_out_din <= write_mem_config_off;

    write_mem_config_offset_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, write_mem_config_offset_load_out_out_full_n, write_mem_config_offset_load_cast21_out_out_full_n, write_mem_config_offset_out_full_n, dout_gmem_V_offset_out_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (dout_gmem_V_offset_out_full_n = ap_const_logic_0) or (write_mem_config_offset_out_full_n = ap_const_logic_0) or (write_mem_config_offset_load_cast21_out_out_full_n = ap_const_logic_0) or (write_mem_config_offset_load_out_out_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            write_mem_config_offset_out_write <= ap_const_logic_1;
        else 
            write_mem_config_offset_out_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
