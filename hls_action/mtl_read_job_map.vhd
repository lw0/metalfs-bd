-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mtl_read_job_map is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_mem_V_AWVALID : OUT STD_LOGIC;
    m_axi_mem_V_AWREADY : IN STD_LOGIC;
    m_axi_mem_V_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_WVALID : OUT STD_LOGIC;
    m_axi_mem_V_WREADY : IN STD_LOGIC;
    m_axi_mem_V_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_mem_V_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_V_WLAST : OUT STD_LOGIC;
    m_axi_mem_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_ARVALID : OUT STD_LOGIC;
    m_axi_mem_V_ARREADY : IN STD_LOGIC;
    m_axi_mem_V_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_RVALID : IN STD_LOGIC;
    m_axi_mem_V_RREADY : OUT STD_LOGIC;
    m_axi_mem_V_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_mem_V_RLAST : IN STD_LOGIC;
    m_axi_mem_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_V_BVALID : IN STD_LOGIC;
    m_axi_mem_V_BREADY : OUT STD_LOGIC;
    m_axi_mem_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mem_V_offset : IN STD_LOGIC_VECTOR (57 downto 0);
    address_V : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of mtl_read_job_map is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_B1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_40 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mem_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mem_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sum_fu_128_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal sum_reg_294 : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_sig_ioackin_m_axi_mem_V_ARREADY : STD_LOGIC;
    signal tmp_35_reg_305 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_21_i_reg_310 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_230_fu_164_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_230_reg_315 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_320 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_reg_325 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_37_reg_330 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_38_reg_335 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_39_reg_340 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_14_i_reg_345 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_40_reg_350 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_cast_fu_134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_mem_V_ARREADY : STD_LOGIC := '0';
    signal tmp_fu_110_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal r_V_10_cast_fu_120_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal mem_V_offset_cast_fu_124_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_65_i_fu_241_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal map_job_slot_V_fu_254_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal map_job_extent_count_fu_260_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal map_job_extent_addre_fu_266_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_mem_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_mem_V_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    if ((ap_sig_ioackin_m_axi_mem_V_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_mem_V_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_mem_V_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_mem_V_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_mem_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                p_Result_14_i_reg_345 <= m_axi_mem_V_RDATA(191 downto 184);
                p_Result_21_i_reg_310 <= m_axi_mem_V_RDATA(63 downto 56);
                tmp_230_reg_315 <= tmp_230_fu_164_p1;
                tmp_35_reg_305 <= m_axi_mem_V_RDATA(55 downto 48);
                tmp_36_reg_325 <= m_axi_mem_V_RDATA(23 downto 16);
                tmp_37_reg_330 <= m_axi_mem_V_RDATA(31 downto 24);
                tmp_38_reg_335 <= m_axi_mem_V_RDATA(39 downto 32);
                tmp_39_reg_340 <= m_axi_mem_V_RDATA(47 downto 40);
                tmp_40_reg_350 <= m_axi_mem_V_RDATA(177 downto 176);
                tmp_s_reg_320 <= m_axi_mem_V_RDATA(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                sum_reg_294 <= sum_fu_128_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_mem_V_RVALID, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_sig_ioackin_m_axi_mem_V_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sig_ioackin_m_axi_mem_V_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((m_axi_mem_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= map_job_slot_V_fu_254_p2;
    ap_return_1 <= map_job_extent_count_fu_260_p3;
    ap_return_2 <= map_job_extent_addre_fu_266_p2;

    ap_sig_ioackin_m_axi_mem_V_ARREADY_assign_proc : process(m_axi_mem_V_ARREADY, ap_reg_ioackin_m_axi_mem_V_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_mem_V_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_mem_V_ARREADY <= m_axi_mem_V_ARREADY;
        else 
            ap_sig_ioackin_m_axi_mem_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_mem_V_ARADDR <= sum_cast_fu_134_p1;
    m_axi_mem_V_ARBURST <= ap_const_lv2_0;
    m_axi_mem_V_ARCACHE <= ap_const_lv4_0;
    m_axi_mem_V_ARID <= ap_const_lv1_0;
    m_axi_mem_V_ARLEN <= ap_const_lv32_1;
    m_axi_mem_V_ARLOCK <= ap_const_lv2_0;
    m_axi_mem_V_ARPROT <= ap_const_lv3_0;
    m_axi_mem_V_ARQOS <= ap_const_lv4_0;
    m_axi_mem_V_ARREGION <= ap_const_lv4_0;
    m_axi_mem_V_ARSIZE <= ap_const_lv3_0;
    m_axi_mem_V_ARUSER <= ap_const_lv1_0;

    m_axi_mem_V_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_m_axi_mem_V_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_mem_V_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_mem_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_mem_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_V_AWADDR <= ap_const_lv64_0;
    m_axi_mem_V_AWBURST <= ap_const_lv2_0;
    m_axi_mem_V_AWCACHE <= ap_const_lv4_0;
    m_axi_mem_V_AWID <= ap_const_lv1_0;
    m_axi_mem_V_AWLEN <= ap_const_lv32_0;
    m_axi_mem_V_AWLOCK <= ap_const_lv2_0;
    m_axi_mem_V_AWPROT <= ap_const_lv3_0;
    m_axi_mem_V_AWQOS <= ap_const_lv4_0;
    m_axi_mem_V_AWREGION <= ap_const_lv4_0;
    m_axi_mem_V_AWSIZE <= ap_const_lv3_0;
    m_axi_mem_V_AWUSER <= ap_const_lv1_0;
    m_axi_mem_V_AWVALID <= ap_const_logic_0;
    m_axi_mem_V_BREADY <= ap_const_logic_0;

    m_axi_mem_V_RREADY_assign_proc : process(m_axi_mem_V_RVALID, ap_CS_fsm_state9)
    begin
        if (((m_axi_mem_V_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            m_axi_mem_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_mem_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_V_WDATA <= ap_const_lv512_lc_1;
    m_axi_mem_V_WID <= ap_const_lv1_0;
    m_axi_mem_V_WLAST <= ap_const_logic_0;
    m_axi_mem_V_WSTRB <= ap_const_lv64_0;
    m_axi_mem_V_WUSER <= ap_const_lv1_0;
    m_axi_mem_V_WVALID <= ap_const_logic_0;
    map_job_extent_addre_fu_266_p2 <= std_logic_vector(unsigned(ap_const_lv64_40) + unsigned(address_V));
    map_job_extent_count_fu_260_p3 <= (tmp_40_reg_350 & p_Result_14_i_reg_345);
    map_job_slot_V_fu_254_p2 <= std_logic_vector(unsigned(tmp_65_i_fu_241_p9) + unsigned(p_Result_s_fu_238_p1));

    mem_V_blk_n_AR_assign_proc : process(m_axi_mem_V_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            mem_V_blk_n_AR <= m_axi_mem_V_ARREADY;
        else 
            mem_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_V_blk_n_R_assign_proc : process(m_axi_mem_V_RVALID, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mem_V_blk_n_R <= m_axi_mem_V_RVALID;
        else 
            mem_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    mem_V_offset_cast_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mem_V_offset),59));
    p_Result_s_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_21_i_reg_310),64));
    r_V_10_cast_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_110_p4),59));
    sum_cast_fu_134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_reg_294),64));
    sum_fu_128_p2 <= std_logic_vector(unsigned(r_V_10_cast_fu_120_p1) + unsigned(mem_V_offset_cast_fu_124_p1));
    tmp_230_fu_164_p1 <= m_axi_mem_V_RDATA(8 - 1 downto 0);
    tmp_65_i_fu_241_p9 <= (((((((tmp_230_reg_315 & tmp_s_reg_320) & tmp_36_reg_325) & tmp_37_reg_330) & tmp_38_reg_335) & tmp_39_reg_340) & tmp_35_reg_305) & ap_const_lv8_0);
    tmp_fu_110_p4 <= address_V(63 downto 6);
end behav;
