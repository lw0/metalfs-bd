-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bf_keyInit is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    key_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    key_V_ce0 : OUT STD_LOGIC;
    key_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dest_g_P_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    dest_g_P_V_ce0 : OUT STD_LOGIC;
    dest_g_P_V_we0 : OUT STD_LOGIC;
    dest_g_P_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_g_P_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dest_g_P_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    dest_g_P_V_ce1 : OUT STD_LOGIC;
    dest_g_P_V_we1 : OUT STD_LOGIC;
    dest_g_P_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_g_P_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    dest_g_S_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    dest_g_S_V_ce0 : OUT STD_LOGIC;
    dest_g_S_V_we0 : OUT STD_LOGIC;
    dest_g_S_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_g_S_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dest_g_S_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    dest_g_S_V_ce1 : OUT STD_LOGIC;
    dest_g_S_V_we1 : OUT STD_LOGIC;
    dest_g_S_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dest_g_S_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of bf_keyInit is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv13_C00 : STD_LOGIC_VECTOR (12 downto 0) := "0110000000000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv13_1400 : STD_LOGIC_VECTOR (12 downto 0) := "1010000000000";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv14_1C00 : STD_LOGIC_VECTOR (13 downto 0) := "01110000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal c_initP_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_initP_V_ce0 : STD_LOGIC;
    signal c_initP_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_initS_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_initS_V_ce0 : STD_LOGIC;
    signal c_initS_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_524 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_bf_encrypt_fu_504_ap_idle : STD_LOGIC;
    signal grp_bf_encrypt_fu_504_ap_ready : STD_LOGIC;
    signal grp_bf_encrypt_fu_504_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_fu_546_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_1341 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_1346 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_1_fu_571_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_1_reg_1364 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_118_cast_fu_593_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_118_cast_reg_1369 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond2_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_597_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_63_reg_1374 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_120_cast_fu_603_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_120_cast_reg_1379 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_64_fu_613_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_64_reg_1384 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_122_cast_fu_619_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_122_cast_reg_1389 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_65_fu_629_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_65_reg_1394 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_124_cast_fu_635_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_124_cast_reg_1399 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_66_fu_645_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_66_reg_1404 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_3_fu_657_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_3_reg_1412 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_126_cast_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_126_cast_reg_1417 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_fu_689_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_68_reg_1422 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_69_fu_694_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_69_reg_1427 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_70_fu_699_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_70_reg_1432 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_71_fu_704_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_71_reg_1437 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_72_fu_709_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_72_reg_1442 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_73_fu_714_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_73_reg_1447 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_74_fu_719_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_74_reg_1452 : STD_LOGIC_VECTOR (13 downto 0);
    signal c_initS_V_load_reg_1462 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_2_fu_790_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal n_2_fu_802_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_2_reg_1498 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_7_cast_fu_808_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_cast_reg_1503 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_030_load_reg_1515 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_284_fu_815_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_cast_fu_831_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_9_cast_reg_1533 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_10_fu_839_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_1545 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_76_fu_865_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_76_reg_1560 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_286_fu_845_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal iCpy_V_1_fu_898_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_80_fu_924_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_80_reg_1574 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_288_fu_904_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal iCpy_V_1_1_fu_957_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_84_fu_983_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_84_reg_1588 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_290_fu_963_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal iCpy_V_1_2_fu_1016_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal tmp_88_fu_1042_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_88_reg_1602 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_292_fu_1022_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal iCpy_V_1_3_fu_1075_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_92_fu_1101_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_92_reg_1616 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_294_fu_1081_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal iCpy_V_1_4_fu_1134_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_96_fu_1160_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_96_reg_1630 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_296_fu_1140_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal iCpy_V_1_5_fu_1193_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal tmp_100_fu_1219_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_100_reg_1644 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_298_fu_1199_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal iCpy_V_1_6_fu_1252_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_104_fu_1278_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_104_reg_1658 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_300_fu_1258_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal iCpy_V_1_7_fu_1311_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal i_4_fu_1317_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_bf_encrypt_fu_504_ap_start : STD_LOGIC;
    signal grp_bf_encrypt_fu_504_left_V_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bf_encrypt_fu_504_right_V_read : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bf_encrypt_fu_504_key_g_P_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_bf_encrypt_fu_504_key_g_P_V_ce0 : STD_LOGIC;
    signal grp_bf_encrypt_fu_504_key_g_P_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_bf_encrypt_fu_504_key_g_P_V_ce1 : STD_LOGIC;
    signal grp_bf_encrypt_fu_504_key_g_S_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_bf_encrypt_fu_504_key_g_S_V_ce0 : STD_LOGIC;
    signal grp_bf_encrypt_fu_504_key_g_S_V_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_bf_encrypt_fu_504_key_g_S_V_ce1 : STD_LOGIC;
    signal grp_bf_encrypt_fu_504_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bf_encrypt_fu_504_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_380 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal n_reg_391 : STD_LOGIC_VECTOR (2 downto 0);
    signal i1_reg_402 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal right_V_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_V_reg_425 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_reg_437 : STD_LOGIC_VECTOR (4 downto 0);
    signal n3_reg_449 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_282_fu_752_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal i4_reg_460 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_030_2_reg_472 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_030_2_lcssa_reg_482 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_bf_encrypt_fu_504_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_127_cast_fu_724_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_128_cast_fu_728_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_129_cast_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_130_cast_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_131_cast_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_132_cast_fu_744_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_133_cast_fu_748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_785_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_139_cast_fu_882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_78_fu_893_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_146_cast_fu_941_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_82_fu_952_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_153_cast_fu_1000_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_86_fu_1011_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_160_cast_fu_1059_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_90_fu_1070_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_167_cast_fu_1118_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_94_fu_1129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_174_cast_fu_1177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_98_fu_1188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_181_cast_fu_1236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_102_fu_1247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_188_cast_fu_1295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_106_fu_1306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_030_s_fu_102 : STD_LOGIC_VECTOR (3 downto 0);
    signal left_V_1_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_V_1_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_577_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_118_cast2_fu_589_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_118_cast1_fu_585_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_cast_fu_675_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_67_fu_679_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_cast3_fu_671_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_cast2_fu_667_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_cast1_fu_663_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_283_fu_775_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_779_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_285_fu_835_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_75_fu_853_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_135_cast_fu_861_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_138_cast_fu_870_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_77_fu_877_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_287_fu_887_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_79_fu_912_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_142_cast_fu_920_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_145_cast_fu_929_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_81_fu_936_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_289_fu_946_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_83_fu_971_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_149_cast_fu_979_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_152_cast_fu_988_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_85_fu_995_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_291_fu_1005_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_87_fu_1030_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_156_cast_fu_1038_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_159_cast_fu_1047_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_89_fu_1054_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_293_fu_1064_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_91_fu_1089_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_163_cast_fu_1097_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_166_cast_fu_1106_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_93_fu_1113_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_295_fu_1123_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_95_fu_1148_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_170_cast_fu_1156_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_173_cast_fu_1165_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_97_fu_1172_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_297_fu_1182_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_99_fu_1207_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_177_cast_fu_1215_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_180_cast_fu_1224_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_101_fu_1231_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_299_fu_1241_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_103_fu_1266_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_184_cast_fu_1274_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_187_cast_fu_1283_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_105_fu_1290_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_301_fu_1300_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);

    component bf_encrypt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        left_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        right_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        key_g_P_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        key_g_P_V_ce0 : OUT STD_LOGIC;
        key_g_P_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        key_g_P_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        key_g_P_V_ce1 : OUT STD_LOGIC;
        key_g_P_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        key_g_S_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        key_g_S_V_ce0 : OUT STD_LOGIC;
        key_g_S_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        key_g_S_V_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        key_g_S_V_ce1 : OUT STD_LOGIC;
        key_g_S_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bf_keyInit_c_initbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bf_keyInit_c_initcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    c_initP_V_U : component bf_keyInit_c_initbkb
    generic map (
        DataWidth => 32,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_initP_V_address0,
        ce0 => c_initP_V_ce0,
        q0 => c_initP_V_q0);

    c_initS_V_U : component bf_keyInit_c_initcud
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => c_initS_V_address0,
        ce0 => c_initS_V_ce0,
        q0 => c_initS_V_q0);

    grp_bf_encrypt_fu_504 : component bf_encrypt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bf_encrypt_fu_504_ap_start,
        ap_done => grp_bf_encrypt_fu_504_ap_done,
        ap_idle => grp_bf_encrypt_fu_504_ap_idle,
        ap_ready => grp_bf_encrypt_fu_504_ap_ready,
        left_V_read => grp_bf_encrypt_fu_504_left_V_read,
        right_V_read => grp_bf_encrypt_fu_504_right_V_read,
        key_g_P_V_address0 => grp_bf_encrypt_fu_504_key_g_P_V_address0,
        key_g_P_V_ce0 => grp_bf_encrypt_fu_504_key_g_P_V_ce0,
        key_g_P_V_q0 => dest_g_P_V_q0,
        key_g_P_V_address1 => grp_bf_encrypt_fu_504_key_g_P_V_address1,
        key_g_P_V_ce1 => grp_bf_encrypt_fu_504_key_g_P_V_ce1,
        key_g_P_V_q1 => dest_g_P_V_q1,
        key_g_S_V_address0 => grp_bf_encrypt_fu_504_key_g_S_V_address0,
        key_g_S_V_ce0 => grp_bf_encrypt_fu_504_key_g_S_V_ce0,
        key_g_S_V_q0 => dest_g_S_V_q0,
        key_g_S_V_address1 => grp_bf_encrypt_fu_504_key_g_S_V_address1,
        key_g_S_V_ce1 => grp_bf_encrypt_fu_504_key_g_S_V_ce1,
        key_g_S_V_q1 => dest_g_S_V_q1,
        ap_return_0 => grp_bf_encrypt_fu_504_ap_return_0,
        ap_return_1 => grp_bf_encrypt_fu_504_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_bf_encrypt_fu_504_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bf_encrypt_fu_504_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_282_fu_752_p3 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (tmp_284_fu_815_p3 = ap_const_lv1_0)))) then 
                    grp_bf_encrypt_fu_504_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bf_encrypt_fu_504_ap_ready = ap_const_logic_1)) then 
                    grp_bf_encrypt_fu_504_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_565_p2 = ap_const_lv1_0))) then 
                i1_reg_402 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i1_reg_402 <= i_3_reg_1412;
            end if; 
        end if;
    end process;

    i2_reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_565_p2 = ap_const_lv1_1))) then 
                i2_reg_437 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i2_reg_437 <= i_2_fu_790_p2;
            end if; 
        end if;
    end process;

    i4_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                i4_reg_460 <= i_4_fu_1317_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond_fu_796_p2 = ap_const_lv1_0))) then 
                i4_reg_460 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_reg_380_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_380 <= i_1_reg_1341;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_380 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    left_V_1_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                left_V_1_fu_106 <= reg_524;
            elsif (((tmp_282_fu_752_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                left_V_1_fu_106 <= left_V_reg_425;
            end if; 
        end if;
    end process;

    left_V_reg_425_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_565_p2 = ap_const_lv1_1))) then 
                left_V_reg_425 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                left_V_reg_425 <= reg_524;
            end if; 
        end if;
    end process;

    n3_reg_449_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_284_fu_815_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                n3_reg_449 <= n_2_reg_1498;
            elsif (((tmp_282_fu_752_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                n3_reg_449 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    n_reg_391_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_540_p2 = ap_const_lv1_1))) then 
                n_reg_391 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_651_p2 = ap_const_lv1_1))) then 
                n_reg_391 <= n_1_reg_1364;
            end if; 
        end if;
    end process;

    p_030_2_lcssa_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_300_fu_1258_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                p_030_2_lcssa_reg_482 <= iCpy_V_1_6_fu_1252_p2;
            elsif (((tmp_298_fu_1199_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                p_030_2_lcssa_reg_482 <= iCpy_V_1_5_fu_1193_p2;
            elsif (((tmp_296_fu_1140_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                p_030_2_lcssa_reg_482 <= iCpy_V_1_4_fu_1134_p2;
            elsif (((tmp_294_fu_1081_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                p_030_2_lcssa_reg_482 <= iCpy_V_1_3_fu_1075_p2;
            elsif (((tmp_292_fu_1022_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then 
                p_030_2_lcssa_reg_482 <= iCpy_V_1_2_fu_1016_p2;
            elsif (((tmp_290_fu_963_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                p_030_2_lcssa_reg_482 <= iCpy_V_1_1_fu_957_p2;
            elsif (((tmp_288_fu_904_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                p_030_2_lcssa_reg_482 <= iCpy_V_1_fu_898_p2;
            elsif (((tmp_286_fu_845_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                p_030_2_lcssa_reg_482 <= p_030_2_reg_472;
            end if; 
        end if;
    end process;

    p_030_2_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                p_030_2_reg_472 <= iCpy_V_1_7_fu_1311_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_bf_encrypt_fu_504_ap_done = ap_const_logic_1))) then 
                p_030_2_reg_472 <= p_030_load_reg_1515;
            end if; 
        end if;
    end process;

    right_V_1_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                right_V_1_fu_110 <= reg_532;
            elsif (((tmp_282_fu_752_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                right_V_1_fu_110 <= right_V_reg_413;
            end if; 
        end if;
    end process;

    right_V_reg_413_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_565_p2 = ap_const_lv1_1))) then 
                right_V_reg_413 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                right_V_reg_413 <= reg_532;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                c_initS_V_load_reg_1462 <= c_initS_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_1341 <= i_1_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_3_reg_1412 <= i_3_fu_657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                n_1_reg_1364 <= n_1_fu_571_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                n_2_reg_1498 <= n_2_fu_802_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                p_030_load_reg_1515 <= p_030_s_fu_102;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                p_030_s_fu_102 <= p_030_2_lcssa_reg_482;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_bf_encrypt_fu_504_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_bf_encrypt_fu_504_ap_done = ap_const_logic_1)))) then
                reg_524 <= grp_bf_encrypt_fu_504_ap_return_0;
                reg_532 <= grp_bf_encrypt_fu_504_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (tmp_298_fu_1199_p3 = ap_const_lv1_0))) then
                tmp_100_reg_1644 <= tmp_100_fu_1219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (tmp_300_fu_1258_p3 = ap_const_lv1_0))) then
                tmp_104_reg_1658 <= tmp_104_fu_1278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_bf_encrypt_fu_504_ap_done = ap_const_logic_1))) then
                    tmp_10_reg_1545(7 downto 1) <= tmp_10_fu_839_p2(7 downto 1);
                    tmp_9_cast_reg_1533(8 downto 0) <= tmp_9_cast_fu_831_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_565_p2 = ap_const_lv1_0))) then
                    tmp_118_cast_reg_1369(10 downto 8) <= tmp_118_cast_fu_593_p1(10 downto 8);
                    tmp_120_cast_reg_1379(10 downto 8) <= tmp_120_cast_fu_603_p4(10 downto 8);
                    tmp_122_cast_reg_1389(10 downto 8) <= tmp_122_cast_fu_619_p4(10 downto 8);
                    tmp_124_cast_reg_1399(10 downto 8) <= tmp_124_cast_fu_635_p4(10 downto 8);
                    tmp_63_reg_1374(11 downto 8) <= tmp_63_fu_597_p2(11 downto 8);
                    tmp_64_reg_1384(12 downto 8) <= tmp_64_fu_613_p2(12 downto 8);
                    tmp_65_reg_1394(12 downto 8) <= tmp_65_fu_629_p2(12 downto 8);
                    tmp_66_reg_1404(13 downto 8) <= tmp_66_fu_645_p2(13 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_651_p2 = ap_const_lv1_0))) then
                    tmp_126_cast_reg_1417(11 downto 0) <= tmp_126_cast_fu_684_p1(11 downto 0);
                tmp_68_reg_1422 <= tmp_68_fu_689_p2;
                tmp_69_reg_1427 <= tmp_69_fu_694_p2;
                tmp_70_reg_1432 <= tmp_70_fu_699_p2;
                tmp_71_reg_1437 <= tmp_71_fu_704_p2;
                tmp_72_reg_1442 <= tmp_72_fu_709_p2;
                tmp_73_reg_1447 <= tmp_73_fu_714_p2;
                tmp_74_reg_1452 <= tmp_74_fu_719_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (tmp_286_fu_845_p3 = ap_const_lv1_0))) then
                tmp_76_reg_1560 <= tmp_76_fu_865_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (exitcond_fu_796_p2 = ap_const_lv1_0))) then
                    tmp_7_cast_reg_1503(2 downto 0) <= tmp_7_cast_fu_808_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (tmp_288_fu_904_p3 = ap_const_lv1_0))) then
                tmp_80_reg_1574 <= tmp_80_fu_924_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (tmp_290_fu_963_p3 = ap_const_lv1_0))) then
                tmp_84_reg_1588 <= tmp_84_fu_983_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (tmp_292_fu_1022_p3 = ap_const_lv1_0))) then
                tmp_88_reg_1602 <= tmp_88_fu_1042_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_294_fu_1081_p3 = ap_const_lv1_0))) then
                tmp_92_reg_1616 <= tmp_92_fu_1101_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (tmp_296_fu_1140_p3 = ap_const_lv1_0))) then
                tmp_96_reg_1630 <= tmp_96_fu_1160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_540_p2 = ap_const_lv1_0))) then
                    tmp_reg_1346(4 downto 0) <= tmp_fu_552_p1(4 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_1346(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_118_cast_reg_1369(7 downto 0) <= "00000000";
    tmp_118_cast_reg_1369(11) <= '0';
    tmp_63_reg_1374(7 downto 0) <= "00000000";
    tmp_120_cast_reg_1379(7 downto 0) <= "00000000";
    tmp_120_cast_reg_1379(14 downto 11) <= "0001";
    tmp_64_reg_1384(7 downto 0) <= "00000000";
    tmp_122_cast_reg_1389(7 downto 0) <= "00000000";
    tmp_122_cast_reg_1389(14 downto 11) <= "0010";
    tmp_65_reg_1394(7 downto 0) <= "00000000";
    tmp_124_cast_reg_1399(7 downto 0) <= "00000000";
    tmp_124_cast_reg_1399(14 downto 11) <= "0011";
    tmp_66_reg_1404(7 downto 0) <= "00000000";
    tmp_126_cast_reg_1417(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    tmp_7_cast_reg_1503(6 downto 3) <= "0000";
    tmp_9_cast_reg_1533(14 downto 9) <= "000000";
    tmp_10_reg_1545(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state16, grp_bf_encrypt_fu_504_ap_done, ap_CS_fsm_state20, ap_CS_fsm_state2, exitcond1_fu_540_p2, ap_CS_fsm_state4, exitcond2_fu_565_p2, ap_CS_fsm_state5, exitcond3_fu_651_p2, ap_CS_fsm_state18, exitcond_fu_796_p2, ap_CS_fsm_state19, tmp_284_fu_815_p3, ap_CS_fsm_state21, tmp_286_fu_845_p3, ap_CS_fsm_state22, tmp_288_fu_904_p3, ap_CS_fsm_state23, tmp_290_fu_963_p3, ap_CS_fsm_state24, tmp_292_fu_1022_p3, ap_CS_fsm_state25, tmp_294_fu_1081_p3, ap_CS_fsm_state26, tmp_296_fu_1140_p3, ap_CS_fsm_state27, tmp_298_fu_1199_p3, ap_CS_fsm_state28, tmp_300_fu_1258_p3, ap_CS_fsm_state15, tmp_282_fu_752_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_540_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_565_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_651_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state15 => 
                if (((tmp_282_fu_752_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_bf_encrypt_fu_504_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state18 => 
                if (((exitcond_fu_796_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                if (((tmp_284_fu_815_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (grp_bf_encrypt_fu_504_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((tmp_286_fu_845_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((tmp_288_fu_904_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                if (((tmp_290_fu_963_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                if (((tmp_292_fu_1022_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                if (((tmp_294_fu_1081_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                if (((tmp_296_fu_1140_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                if (((tmp_298_fu_1199_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                if (((tmp_300_fu_1258_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state18, exitcond_fu_796_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((exitcond_fu_796_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state18, exitcond_fu_796_p2)
    begin
        if (((exitcond_fu_796_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_initP_V_address0 <= tmp_fu_552_p1(5 - 1 downto 0);

    c_initP_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            c_initP_V_ce0 <= ap_const_logic_1;
        else 
            c_initP_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_initS_V_address0 <= tmp_126_cast_fu_684_p1(10 - 1 downto 0);

    c_initS_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            c_initS_V_ce0 <= ap_const_logic_1;
        else 
            c_initS_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dest_g_P_V_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state20, tmp_reg_1346, ap_CS_fsm_state17, grp_bf_encrypt_fu_504_key_g_P_V_address0, ap_CS_fsm_state3, tmp_3_fu_770_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dest_g_P_V_address0 <= tmp_3_fu_770_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dest_g_P_V_address0 <= tmp_reg_1346(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            dest_g_P_V_address0 <= grp_bf_encrypt_fu_504_key_g_P_V_address0;
        else 
            dest_g_P_V_address0 <= "XXXXX";
        end if; 
    end process;


    dest_g_P_V_address1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state17, grp_bf_encrypt_fu_504_key_g_P_V_address1, tmp_5_fu_785_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dest_g_P_V_address1 <= tmp_5_fu_785_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            dest_g_P_V_address1 <= grp_bf_encrypt_fu_504_key_g_P_V_address1;
        else 
            dest_g_P_V_address1 <= "XXXXX";
        end if; 
    end process;


    dest_g_P_V_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state17, grp_bf_encrypt_fu_504_key_g_P_V_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            dest_g_P_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            dest_g_P_V_ce0 <= grp_bf_encrypt_fu_504_key_g_P_V_ce0;
        else 
            dest_g_P_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dest_g_P_V_ce1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state17, grp_bf_encrypt_fu_504_key_g_P_V_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dest_g_P_V_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            dest_g_P_V_ce1 <= grp_bf_encrypt_fu_504_key_g_P_V_ce1;
        else 
            dest_g_P_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dest_g_P_V_d0_assign_proc : process(reg_524, ap_CS_fsm_state17, ap_CS_fsm_state3, r_V_fu_558_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dest_g_P_V_d0 <= reg_524;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dest_g_P_V_d0 <= r_V_fu_558_p2;
        else 
            dest_g_P_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    dest_g_P_V_d1 <= reg_532;

    dest_g_P_V_we0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            dest_g_P_V_we0 <= ap_const_logic_1;
        else 
            dest_g_P_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dest_g_P_V_we1_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dest_g_P_V_we1 <= ap_const_logic_1;
        else 
            dest_g_P_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    dest_g_S_V_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state20, tmp_126_cast_reg_1417, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, grp_bf_encrypt_fu_504_key_g_S_V_address0, ap_CS_fsm_state14, ap_CS_fsm_state7, tmp_127_cast_fu_724_p1, ap_CS_fsm_state8, tmp_128_cast_fu_728_p1, ap_CS_fsm_state9, tmp_129_cast_fu_732_p1, ap_CS_fsm_state10, tmp_130_cast_fu_736_p1, ap_CS_fsm_state11, tmp_131_cast_fu_740_p1, ap_CS_fsm_state12, tmp_132_cast_fu_744_p1, ap_CS_fsm_state13, tmp_133_cast_fu_748_p1, tmp_139_cast_fu_882_p1, tmp_82_fu_952_p1, tmp_86_fu_1011_p1, tmp_90_fu_1070_p1, tmp_94_fu_1129_p1, tmp_98_fu_1188_p1, tmp_102_fu_1247_p1, tmp_106_fu_1306_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            dest_g_S_V_address0 <= tmp_106_fu_1306_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dest_g_S_V_address0 <= tmp_102_fu_1247_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            dest_g_S_V_address0 <= tmp_98_fu_1188_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dest_g_S_V_address0 <= tmp_94_fu_1129_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            dest_g_S_V_address0 <= tmp_90_fu_1070_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            dest_g_S_V_address0 <= tmp_86_fu_1011_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            dest_g_S_V_address0 <= tmp_82_fu_952_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dest_g_S_V_address0 <= tmp_139_cast_fu_882_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dest_g_S_V_address0 <= tmp_133_cast_fu_748_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dest_g_S_V_address0 <= tmp_132_cast_fu_744_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            dest_g_S_V_address0 <= tmp_131_cast_fu_740_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dest_g_S_V_address0 <= tmp_130_cast_fu_736_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dest_g_S_V_address0 <= tmp_129_cast_fu_732_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dest_g_S_V_address0 <= tmp_128_cast_fu_728_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dest_g_S_V_address0 <= tmp_127_cast_fu_724_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dest_g_S_V_address0 <= tmp_126_cast_reg_1417(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            dest_g_S_V_address0 <= grp_bf_encrypt_fu_504_key_g_S_V_address0;
        else 
            dest_g_S_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    dest_g_S_V_address1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, grp_bf_encrypt_fu_504_key_g_S_V_address1, tmp_78_fu_893_p1, tmp_146_cast_fu_941_p1, tmp_153_cast_fu_1000_p1, tmp_160_cast_fu_1059_p1, tmp_167_cast_fu_1118_p1, tmp_174_cast_fu_1177_p1, tmp_181_cast_fu_1236_p1, tmp_188_cast_fu_1295_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            dest_g_S_V_address1 <= tmp_188_cast_fu_1295_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dest_g_S_V_address1 <= tmp_181_cast_fu_1236_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            dest_g_S_V_address1 <= tmp_174_cast_fu_1177_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dest_g_S_V_address1 <= tmp_167_cast_fu_1118_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            dest_g_S_V_address1 <= tmp_160_cast_fu_1059_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            dest_g_S_V_address1 <= tmp_153_cast_fu_1000_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            dest_g_S_V_address1 <= tmp_146_cast_fu_941_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dest_g_S_V_address1 <= tmp_78_fu_893_p1(13 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            dest_g_S_V_address1 <= grp_bf_encrypt_fu_504_key_g_S_V_address1;
        else 
            dest_g_S_V_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    dest_g_S_V_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, grp_bf_encrypt_fu_504_key_g_S_V_ce0, ap_CS_fsm_state14, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            dest_g_S_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            dest_g_S_V_ce0 <= grp_bf_encrypt_fu_504_key_g_S_V_ce0;
        else 
            dest_g_S_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dest_g_S_V_ce1_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, grp_bf_encrypt_fu_504_key_g_S_V_ce1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            dest_g_S_V_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            dest_g_S_V_ce1 <= grp_bf_encrypt_fu_504_key_g_S_V_ce1;
        else 
            dest_g_S_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dest_g_S_V_d0_assign_proc : process(reg_524, reg_532, c_initS_V_load_reg_1462, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state14, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            dest_g_S_V_d0 <= reg_532;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dest_g_S_V_d0 <= reg_524;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            dest_g_S_V_d0 <= c_initS_V_load_reg_1462;
        else 
            dest_g_S_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dest_g_S_V_d1_assign_proc : process(reg_524, reg_532, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            dest_g_S_V_d1 <= reg_524;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dest_g_S_V_d1 <= reg_532;
        else 
            dest_g_S_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dest_g_S_V_we0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state14, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            dest_g_S_V_we0 <= ap_const_logic_1;
        else 
            dest_g_S_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dest_g_S_V_we1_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            dest_g_S_V_we1 <= ap_const_logic_1;
        else 
            dest_g_S_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_540_p2 <= "1" when (i_reg_380 = ap_const_lv5_10) else "0";
    exitcond2_fu_565_p2 <= "1" when (n_reg_391 = ap_const_lv3_4) else "0";
    exitcond3_fu_651_p2 <= "1" when (i1_reg_402 = ap_const_lv9_100) else "0";
    exitcond_fu_796_p2 <= "1" when (n3_reg_449 = ap_const_lv3_4) else "0";
    grp_bf_encrypt_fu_504_ap_start <= grp_bf_encrypt_fu_504_ap_start_reg;

    grp_bf_encrypt_fu_504_left_V_read_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state20, left_V_reg_425, left_V_1_fu_106)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_bf_encrypt_fu_504_left_V_read <= left_V_1_fu_106;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_bf_encrypt_fu_504_left_V_read <= left_V_reg_425;
        else 
            grp_bf_encrypt_fu_504_left_V_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_bf_encrypt_fu_504_right_V_read_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state20, right_V_reg_413, right_V_1_fu_110)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_bf_encrypt_fu_504_right_V_read <= right_V_1_fu_110;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_bf_encrypt_fu_504_right_V_read <= right_V_reg_413;
        else 
            grp_bf_encrypt_fu_504_right_V_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    iCpy_V_1_1_fu_957_p2 <= std_logic_vector(unsigned(p_030_2_reg_472) + unsigned(ap_const_lv4_2));
    iCpy_V_1_2_fu_1016_p2 <= std_logic_vector(unsigned(p_030_2_reg_472) + unsigned(ap_const_lv4_3));
    iCpy_V_1_3_fu_1075_p2 <= std_logic_vector(unsigned(p_030_2_reg_472) + unsigned(ap_const_lv4_4));
    iCpy_V_1_4_fu_1134_p2 <= std_logic_vector(unsigned(p_030_2_reg_472) + unsigned(ap_const_lv4_5));
    iCpy_V_1_5_fu_1193_p2 <= std_logic_vector(unsigned(p_030_2_reg_472) + unsigned(ap_const_lv4_6));
    iCpy_V_1_6_fu_1252_p2 <= std_logic_vector(unsigned(p_030_2_reg_472) + unsigned(ap_const_lv4_7));
    iCpy_V_1_7_fu_1311_p2 <= (p_030_2_reg_472 xor ap_const_lv4_8);
    iCpy_V_1_fu_898_p2 <= std_logic_vector(unsigned(p_030_2_reg_472) + unsigned(ap_const_lv4_1));
    i_1_fu_546_p2 <= std_logic_vector(unsigned(i_reg_380) + unsigned(ap_const_lv5_1));
    i_2_fu_790_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(i2_reg_437));
    i_3_fu_657_p2 <= std_logic_vector(unsigned(i1_reg_402) + unsigned(ap_const_lv9_1));
    i_4_fu_1317_p2 <= std_logic_vector(unsigned(i4_reg_460) + unsigned(ap_const_lv9_2));
    key_V_address0 <= tmp_fu_552_p1(4 - 1 downto 0);

    key_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            key_V_ce0 <= ap_const_logic_1;
        else 
            key_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    n_1_fu_571_p2 <= std_logic_vector(unsigned(n_reg_391) + unsigned(ap_const_lv3_1));
    n_2_fu_802_p2 <= std_logic_vector(unsigned(n3_reg_449) + unsigned(ap_const_lv3_1));
    r_V_fu_558_p2 <= (key_V_q0 xor c_initP_V_q0);
    tmp_100_fu_1219_p2 <= std_logic_vector(unsigned(tmp_7_cast_reg_1503) + unsigned(tmp_177_cast_fu_1215_p1));
    tmp_101_fu_1231_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_1533) + unsigned(tmp_180_cast_fu_1224_p3));
    tmp_102_fu_1247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_299_fu_1241_p3),64));
    tmp_103_fu_1266_p3 <= (iCpy_V_1_6_fu_1252_p2 & ap_const_lv2_0);
    tmp_104_fu_1278_p2 <= std_logic_vector(unsigned(tmp_7_cast_reg_1503) + unsigned(tmp_184_cast_fu_1274_p1));
    tmp_105_fu_1290_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_1533) + unsigned(tmp_187_cast_fu_1283_p3));
    tmp_106_fu_1306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_301_fu_1300_p3),64));
    tmp_10_fu_839_p2 <= (tmp_285_fu_835_p1 or ap_const_lv8_1);
    tmp_118_cast1_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_577_p3),14));
    tmp_118_cast2_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_577_p3),13));
    tmp_118_cast_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_577_p3),12));
    tmp_120_cast_fu_603_p4 <= ((ap_const_lv4_1 & n_reg_391) & ap_const_lv8_0);
    tmp_122_cast_fu_619_p4 <= ((ap_const_lv4_2 & n_reg_391) & ap_const_lv8_0);
    tmp_124_cast_fu_635_p4 <= ((ap_const_lv4_3 & n_reg_391) & ap_const_lv8_0);
    tmp_126_cast_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_679_p2),64));
    tmp_127_cast_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_reg_1422),64));
    tmp_128_cast_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_reg_1427),64));
    tmp_129_cast_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_70_reg_1432),64));
    tmp_130_cast_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_reg_1437),64));
    tmp_131_cast_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_72_reg_1442),64));
    tmp_132_cast_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_73_reg_1447),64));
    tmp_133_cast_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_74_reg_1452),64));
    tmp_135_cast_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_75_fu_853_p3),7));
    tmp_138_cast_fu_870_p3 <= (tmp_76_reg_1560 & ap_const_lv8_0);
    tmp_139_cast_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_77_fu_877_p2),64));
    tmp_142_cast_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_79_fu_912_p3),7));
    tmp_145_cast_fu_929_p3 <= (tmp_80_reg_1574 & ap_const_lv8_0);
    tmp_146_cast_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_81_fu_936_p2),64));
    tmp_149_cast_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_83_fu_971_p3),7));
    tmp_152_cast_fu_988_p3 <= (tmp_84_reg_1588 & ap_const_lv8_0);
    tmp_153_cast_fu_1000_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_85_fu_995_p2),64));
    tmp_156_cast_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_87_fu_1030_p3),7));
    tmp_159_cast_fu_1047_p3 <= (tmp_88_reg_1602 & ap_const_lv8_0);
    tmp_160_cast_fu_1059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_89_fu_1054_p2),64));
    tmp_163_cast_fu_1097_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_91_fu_1089_p3),7));
    tmp_166_cast_fu_1106_p3 <= (tmp_92_reg_1616 & ap_const_lv8_0);
    tmp_167_cast_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_93_fu_1113_p2),64));
    tmp_170_cast_fu_1156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_95_fu_1148_p3),7));
    tmp_173_cast_fu_1165_p3 <= (tmp_96_reg_1630 & ap_const_lv8_0);
    tmp_174_cast_fu_1177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_97_fu_1172_p2),64));
    tmp_177_cast_fu_1215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_fu_1207_p3),7));
    tmp_180_cast_fu_1224_p3 <= (tmp_100_reg_1644 & ap_const_lv8_0);
    tmp_181_cast_fu_1236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_fu_1231_p2),64));
    tmp_184_cast_fu_1274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_103_fu_1266_p3),7));
    tmp_187_cast_fu_1283_p3 <= (tmp_104_reg_1658 & ap_const_lv8_0);
    tmp_188_cast_fu_1295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_fu_1290_p2),64));
    tmp_282_fu_752_p3 <= i2_reg_437(4 downto 4);
    tmp_283_fu_775_p1 <= i2_reg_437(4 - 1 downto 0);
    tmp_284_fu_815_p3 <= i4_reg_460(8 downto 8);
    tmp_285_fu_835_p1 <= i4_reg_460(8 - 1 downto 0);
    tmp_286_fu_845_p3 <= p_030_2_reg_472(3 downto 3);
    tmp_287_fu_887_p3 <= (tmp_76_reg_1560 & tmp_10_reg_1545);
    tmp_288_fu_904_p3 <= iCpy_V_1_fu_898_p2(3 downto 3);
    tmp_289_fu_946_p3 <= (tmp_80_reg_1574 & tmp_10_reg_1545);
    tmp_290_fu_963_p3 <= iCpy_V_1_1_fu_957_p2(3 downto 3);
    tmp_291_fu_1005_p3 <= (tmp_84_reg_1588 & tmp_10_reg_1545);
    tmp_292_fu_1022_p3 <= iCpy_V_1_2_fu_1016_p2(3 downto 3);
    tmp_293_fu_1064_p3 <= (tmp_88_reg_1602 & tmp_10_reg_1545);
    tmp_294_fu_1081_p3 <= iCpy_V_1_3_fu_1075_p2(3 downto 3);
    tmp_295_fu_1123_p3 <= (tmp_92_reg_1616 & tmp_10_reg_1545);
    tmp_296_fu_1140_p3 <= iCpy_V_1_4_fu_1134_p2(3 downto 3);
    tmp_297_fu_1182_p3 <= (tmp_96_reg_1630 & tmp_10_reg_1545);
    tmp_298_fu_1199_p3 <= iCpy_V_1_5_fu_1193_p2(3 downto 3);
    tmp_299_fu_1241_p3 <= (tmp_100_reg_1644 & tmp_10_reg_1545);
    tmp_300_fu_1258_p3 <= iCpy_V_1_6_fu_1252_p2(3 downto 3);
    tmp_301_fu_1300_p3 <= (tmp_104_reg_1658 & tmp_10_reg_1545);
    tmp_3_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_437),64));
    tmp_4_fu_779_p2 <= (tmp_283_fu_775_p1 or ap_const_lv4_1);
    tmp_5_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_779_p2),64));
    tmp_63_fu_597_p2 <= std_logic_vector(unsigned(tmp_118_cast_fu_593_p1) + unsigned(ap_const_lv12_400));
    tmp_64_fu_613_p2 <= std_logic_vector(unsigned(tmp_118_cast2_fu_589_p1) + unsigned(ap_const_lv13_C00));
    tmp_65_fu_629_p2 <= std_logic_vector(unsigned(tmp_118_cast2_fu_589_p1) + unsigned(ap_const_lv13_1400));
    tmp_66_fu_645_p2 <= std_logic_vector(unsigned(tmp_118_cast1_fu_585_p1) + unsigned(ap_const_lv14_1C00));
    tmp_67_fu_679_p2 <= std_logic_vector(unsigned(tmp_118_cast_reg_1369) + unsigned(tmp_6_cast_fu_675_p1));
    tmp_68_fu_689_p2 <= std_logic_vector(unsigned(tmp_63_reg_1374) + unsigned(tmp_6_cast_fu_675_p1));
    tmp_69_fu_694_p2 <= std_logic_vector(unsigned(tmp_120_cast_reg_1379) + unsigned(tmp_6_cast3_fu_671_p1));
    tmp_6_cast1_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_402),14));
    tmp_6_cast2_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_402),13));
    tmp_6_cast3_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_402),15));
    tmp_6_cast_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_402),12));
    tmp_70_fu_699_p2 <= std_logic_vector(unsigned(tmp_64_reg_1384) + unsigned(tmp_6_cast2_fu_667_p1));
    tmp_71_fu_704_p2 <= std_logic_vector(unsigned(tmp_122_cast_reg_1389) + unsigned(tmp_6_cast3_fu_671_p1));
    tmp_72_fu_709_p2 <= std_logic_vector(unsigned(tmp_65_reg_1394) + unsigned(tmp_6_cast2_fu_667_p1));
    tmp_73_fu_714_p2 <= std_logic_vector(unsigned(tmp_124_cast_reg_1399) + unsigned(tmp_6_cast3_fu_671_p1));
    tmp_74_fu_719_p2 <= std_logic_vector(unsigned(tmp_66_reg_1404) + unsigned(tmp_6_cast1_fu_663_p1));
    tmp_75_fu_853_p3 <= (p_030_2_reg_472 & ap_const_lv2_0);
    tmp_76_fu_865_p2 <= std_logic_vector(unsigned(tmp_7_cast_reg_1503) + unsigned(tmp_135_cast_fu_861_p1));
    tmp_77_fu_877_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_1533) + unsigned(tmp_138_cast_fu_870_p3));
    tmp_78_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_287_fu_887_p3),64));
    tmp_79_fu_912_p3 <= (iCpy_V_1_fu_898_p2 & ap_const_lv2_0);
    tmp_7_cast_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n3_reg_449),7));
    tmp_80_fu_924_p2 <= std_logic_vector(unsigned(tmp_7_cast_reg_1503) + unsigned(tmp_142_cast_fu_920_p1));
    tmp_81_fu_936_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_1533) + unsigned(tmp_145_cast_fu_929_p3));
    tmp_82_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_289_fu_946_p3),64));
    tmp_83_fu_971_p3 <= (iCpy_V_1_1_fu_957_p2 & ap_const_lv2_0);
    tmp_84_fu_983_p2 <= std_logic_vector(unsigned(tmp_7_cast_reg_1503) + unsigned(tmp_149_cast_fu_979_p1));
    tmp_85_fu_995_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_1533) + unsigned(tmp_152_cast_fu_988_p3));
    tmp_86_fu_1011_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_291_fu_1005_p3),64));
    tmp_87_fu_1030_p3 <= (iCpy_V_1_2_fu_1016_p2 & ap_const_lv2_0);
    tmp_88_fu_1042_p2 <= std_logic_vector(unsigned(tmp_7_cast_reg_1503) + unsigned(tmp_156_cast_fu_1038_p1));
    tmp_89_fu_1054_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_1533) + unsigned(tmp_159_cast_fu_1047_p3));
    tmp_90_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_293_fu_1064_p3),64));
    tmp_91_fu_1089_p3 <= (iCpy_V_1_3_fu_1075_p2 & ap_const_lv2_0);
    tmp_92_fu_1101_p2 <= std_logic_vector(unsigned(tmp_7_cast_reg_1503) + unsigned(tmp_163_cast_fu_1097_p1));
    tmp_93_fu_1113_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_1533) + unsigned(tmp_166_cast_fu_1106_p3));
    tmp_94_fu_1129_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_295_fu_1123_p3),64));
    tmp_95_fu_1148_p3 <= (iCpy_V_1_4_fu_1134_p2 & ap_const_lv2_0);
    tmp_96_fu_1160_p2 <= std_logic_vector(unsigned(tmp_7_cast_reg_1503) + unsigned(tmp_170_cast_fu_1156_p1));
    tmp_97_fu_1172_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_1533) + unsigned(tmp_173_cast_fu_1165_p3));
    tmp_98_fu_1188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_297_fu_1182_p3),64));
    tmp_99_fu_1207_p3 <= (iCpy_V_1_5_fu_1193_p2 & ap_const_lv2_0);
    tmp_9_cast_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_460),15));
    tmp_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_380),64));
    tmp_s_fu_577_p3 <= (n_reg_391 & ap_const_lv8_0);
end behav;
